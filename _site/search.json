[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Sciencist",
    "section": "",
    "text": "Ganta Preethi Resume\n\n\n\n\n\n\n\n\n\n\n\nGanta Preethi\n\n\n\n\n\n\n\n\n\n\n\n\nLinear Regression - Car Price Prediction And Data Analysis\n\n\n\n\n\n\ncode\n\n\nAnalysis\n\n\n\n\n\n\n\n\n\nJul 29, 2024\n\n\nPreethi Ganta\n\n\n\n\n\n\n\n\n\n\n\n\nReport On Iris Data\n\n\n\n\n\n\ncode\n\n\nAnalysis\n\n\n\n\n\n\n\n\n\nJul 19, 2024\n\n\nPreethi Ganta\n\n\n\n\n\n\n\n\n\n\n\n\nReport on Wine Data\n\n\n\n\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nJul 16, 2024\n\n\nPreethi Ganta\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nJun 27, 2024\n\n\nPreethi Ganta\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "About Me"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Extrating the data from the data base",
    "section": "",
    "text": "import pandas as pd import requests import psycopg2 from io import BytesIO from sqlalchemy import create_engine\ndef download_file_to_memory(url): response = requests.get(url, verify=False) # Disable SSL verification response.raise_for_status() # Check if the request was successful return BytesIO(response.content)\ndef extract_data_from_excel(file_content): df = pd.read_excel(file_content, skiprows=7, sheet_name=None) return df\ndef clean_data(df): if df is None: print(“No data to clean”) return None\ntry:\n    # Example data cleaning steps:\n    df = df.drop_duplicates()  # Remove duplicate rows\n    df = df.fillna(0)  # Fill missing values with 0\n\n    # Convert float columns to percentages\n    float_columns = df.select_dtypes(include=['float64'])\n    for col in float_columns:\n        df[col] = round(df[col] * 100, 2)\n        df[col] = df[col].astype(str) + '%'\n    return df\nexcept Exception as e:\n    print(f\"Error during data cleaning: {e}\")\n    return None\ndef main(url): # Step 1: Download the Excel file to memory file_content = download_file_to_memory(url) print(“Downloaded the file to memory”)\n# Step 2: Extract data from the Excel file\ndfs = extract_data_from_excel(file_content)\nprint(f\"Extracted data from Excel: {list(dfs.keys())}\\n\")\n\ntry:\n    conn = psycopg2.connect(\n        database=\"mydb\", user='postgres', password='0726', host='localhost', port='5432')\n    conn.autocommit = True\n    cursor = conn.cursor()\n    print(\"Database connected successfully\")\n\n    connection_string = \"postgresql+psycopg2://postgres:0726@localhost:5432/mydb\"\n    engine = create_engine(connection_string)\n    print(\"Engine created\")\n\n    for sheet_name, df in dfs.items():\n        table_name = input(f\"Enter table name for sheet '{sheet_name}': \")\n\n        # Clean the data\n        df = clean_data(df)\n        print(f\"Cleaned data for sheet '{sheet_name}'\")\n\n        # Write the DataFrame to the database\n        df.to_sql(table_name, engine, if_exists='replace', index=False)\n        print(f\"DataFrame from sheet '{sheet_name}' written to table '{table_name}'\")\n\n        # Execute a query to confirm the data was inserted\n        sql_query = f\"SELECT * FROM {table_name};\"\n        print(f\"Executing query for table '{table_name}'\")\n        data = pd.read_sql_query(sql_query, engine)\n        print(data)\n\n    print(\"Executing query\")\nexcept psycopg2.Error as e:\n    print(\"Error connecting to PostgresSQL database:\", e)\nfinally:\n    if conn is not None:\n        conn.close()\n        print(\"Database connection closed.\")\nif name == “main”: url = input(“Enter the URL of the Excel file:”) main(url)"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Preethi Ganta",
    "section": "",
    "text": "About Me\nWelcome to my blog. I am a data professional with a strong focus on financial analysis, technology, and industry trends. With expertise in Python programming, I utilize tools like PostgreSQL, pandas, and Excel to convert raw data into meaningful insights. My work frequently involves in-depth analyses of financial metrics, R&D expenditures, and growth trends across various sectors.\nI have a particular proficiency in developing and deploying machine learning models, including regression models, using TensorFlow . Enhancing the interactivity and accessibility of data insights. My commitment lies in making complex data both practical and engaging, whether through predictive modeling or the development of seamless user interfaces.\nBeyond my technical expertise, I am passionate about data visualization and effective storytelling by create to designing interactive visualizations, my objective is to present data insights in a clear and compelling manner. I meticulously document my processes and share comprehensive tutorials to empower others to apply these techniques in their own work.\nThis blog serves as a platform to explore the convergence of data, finance, and technology. Here, I provide in-depth analysis, practical guidance, and insights into how data informs real-world decisions. When I am not engaged in analysis or writing, I am often experimenting with emerging technologies, refining my Quatro blog, or exploring deployment strategies with platforms like Netlify.\nI welcome the opportunity to connect with fellow professionals. Feel free to reach out with questions, feedback, or to discuss about data and technology."
  },
  {
    "objectID": "posts/welcome/Cv.html",
    "href": "posts/welcome/Cv.html",
    "title": "Ganta Preethi’s Resume",
    "section": "",
    "text": "Experienced and dedicated Data Analyst with several years of experience identifying efficiencies and problem areas within data streams while communicating needs for projects. Adept at receiving and monitoring data from multiple streams, including Access, SQL, and Excel data sources. Ability to synthesize quantitative information and interact effectively with colleagues and clients. Proven track record of generating summary documents for senior management for monthly and quarterly audit and compliance reporting."
  },
  {
    "objectID": "posts/welcome/Cv.html#profile",
    "href": "posts/welcome/Cv.html#profile",
    "title": "Ganta Preethi’s Resume",
    "section": "",
    "text": "Experienced and dedicated Data Analyst with several years of experience identifying efficiencies and problem areas within data streams while communicating needs for projects. Adept at receiving and monitoring data from multiple streams, including Access, SQL, and Excel data sources. Ability to synthesize quantitative information and interact effectively with colleagues and clients. Proven track record of generating summary documents for senior management for monthly and quarterly audit and compliance reporting."
  },
  {
    "objectID": "posts/welcome/Cv.html#employment-history",
    "href": "posts/welcome/Cv.html#employment-history",
    "title": "Ganta Preethi’s Resume",
    "section": "Employment History",
    "text": "Employment History\n\nCompleted internship on Python for Data Science in 1Stop.ai.\nCompleted internship on Cyber Security in 1Stop.ai."
  },
  {
    "objectID": "posts/welcome/Cv.html#education",
    "href": "posts/welcome/Cv.html#education",
    "title": "Ganta Preethi’s Resume",
    "section": "Education",
    "text": "Education\nMaster of Information Assurance and Systems, Wilmington University, Wilmington\n\nGraduated in the top 5% of my class.\nGPA: 3.95 (Till Now)\n\nBachelor of Computer Sciences, Bapatla Women’s Engineering College, Bapatla\n\nGPA: 3.91"
  },
  {
    "objectID": "posts/welcome/Cv.html#projects",
    "href": "posts/welcome/Cv.html#projects",
    "title": "Ganta Preethi’s Resume",
    "section": "Projects",
    "text": "Projects\n\nMouseLess Cursor using Facial Movements\nThe main objective of mouseless cursor control using facial movement is to provide an alternative method for computer users who are unable to use a traditional mouse due to physical limitations or disabilities. By using facial movements, users can more easily navigate their computer screens.\n\n\nObject Tracking Using Camshift Algorithm\nIt is an application of deep learning which is used to develop a unique identification for each of the initial detections and then track the detected objects as they move around frames in video.\n\n\nAutomatic Text Generation Using LSTM\nLSTM-based automatic text generation involves training a neural network to learn patterns in a dataset and generate new text based on those patterns. The objective is to minimize the difference between the generated and actual text using a loss function."
  },
  {
    "objectID": "posts/welcome/Cv.html#details",
    "href": "posts/welcome/Cv.html#details",
    "title": "Ganta Preethi’s Resume",
    "section": "Details",
    "text": "Details\n\nEmail: preethiganta007@gmail.com\nContact: +1 (302) 409-5927\nLinkedIn: https://www.linkedin.com/in/preethi-g-4b414b28b"
  },
  {
    "objectID": "posts/welcome/Cv.html#skills",
    "href": "posts/welcome/Cv.html#skills",
    "title": "Ganta Preethi’s Resume",
    "section": "Skills",
    "text": "Skills\n\nPython Programming\nC Programming\nSQL\nDBMS\nAWS\nLeadership Skills\nData Clean-ups\nPowerBI\nMicrosoft Office\nAgile Methodologies\nData Analytics\nGoogle Sheets"
  },
  {
    "objectID": "posts/welcome/Cv.html#languages",
    "href": "posts/welcome/Cv.html#languages",
    "title": "Ganta Preethi’s Resume",
    "section": "Languages",
    "text": "Languages\n\nEnglish\nTelugu"
  },
  {
    "objectID": "posts/Iris Data/Report.html",
    "href": "posts/Iris Data/Report.html",
    "title": "Report On Iris Data",
    "section": "",
    "text": "The above image shows the three species of iris there iris_setosa,iris_versicolor and iris_virginica\n\n\nHere, Dataset shows the class and features Class:-iris_setosa,iris_versicolor,iris_verginica Features:-Sepal_length,Sepal_width,petal_length,petal_width\n\n\nCode\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport nbformat\n\n# Read the .dat file\ndata = pd.read_csv('iris.data', delimiter=',')\ndata.to_excel('iris.xlsx', index=False)\nprint(data)\nnum_df = data.select_dtypes(include = 'number')\n\n\n     sepal length  sepal width  petal length  petal width           class\n0             5.1          3.5           1.4          0.2     Iris-setosa\n1             4.9          3.0           1.4          0.2     Iris-setosa\n2             4.7          3.2           1.3          0.2     Iris-setosa\n3             4.6          3.1           1.5          0.2     Iris-setosa\n4             5.0          3.6           1.4          0.2     Iris-setosa\n..            ...          ...           ...          ...             ...\n145           6.7          3.0           5.2          2.3  Iris-virginica\n146           6.3          2.5           5.0          1.9  Iris-virginica\n147           6.5          3.0           5.2          2.0  Iris-virginica\n148           6.2          3.4           5.4          2.3  Iris-virginica\n149           5.9          3.0           5.1          1.8  Iris-virginica\n\n[150 rows x 5 columns]"
  },
  {
    "objectID": "posts/Iris Data/Report.html#report-on-iris-data",
    "href": "posts/Iris Data/Report.html#report-on-iris-data",
    "title": "Report On Iris Data",
    "section": "",
    "text": "The above image shows the three species of iris there iris_setosa,iris_versicolor and iris_virginica ## Iris Dataset Here, Dataset shows the class and features Class:-iris_setosa,iris_versicolor,iris_verginica Features:-Sepal_length,Sepal_width,petal_length,petal_width\n\n\nCode\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport nbformat\n\n# Read the .dat file\ndata = pd.read_csv('iris.data', delimiter=',')\ndata.to_excel('iris.xlsx', index=False)\nprint(data)\nnum_df = data.select_dtypes(include = 'number')\n\n\n     sepal length  sepal width  petal length  petal width           class\n0             5.1          3.5           1.4          0.2     Iris-setosa\n1             4.9          3.0           1.4          0.2     Iris-setosa\n2             4.7          3.2           1.3          0.2     Iris-setosa\n3             4.6          3.1           1.5          0.2     Iris-setosa\n4             5.0          3.6           1.4          0.2     Iris-setosa\n..            ...          ...           ...          ...             ...\n145           6.7          3.0           5.2          2.3  Iris-virginica\n146           6.3          2.5           5.0          1.9  Iris-virginica\n147           6.5          3.0           5.2          2.0  Iris-virginica\n148           6.2          3.4           5.4          2.3  Iris-virginica\n149           5.9          3.0           5.1          1.8  Iris-virginica\n\n[150 rows x 5 columns]"
  },
  {
    "objectID": "posts/Iris Data/Report.html#box-plot",
    "href": "posts/Iris Data/Report.html#box-plot",
    "title": "Report On Iris Data",
    "section": "Box Plot",
    "text": "Box Plot\n\n\nCode\n# Box plot\nsns.boxplot(data, x=\"class\", y=\"sepal width\",hue='class', palette=\"Set3\")\nplt.title(\"Box Plot of Sepal Width by Species\")\nplt.show()\n\n\n\n\n\n\n\n\n\nThe box plot provides a clear visual comparison of the sepal widths across the three Iris species: Iris-setosa has the widest range of sepal widths, with the highest median value and the greatest variability. Iris-versicolor has a narrower range of sepal widths with a lower median compared to Iris-setosa. Iris-virginica has a sepal width distribution similar to Iris-versicolor, with moderate variability and a comparable median value.\n\n\nCode\n# Box plot\nsns.boxplot(data, x=\"class\", y=\"sepal length\",hue='class', palette=\"Set3\")\nplt.title(\"Box Plot of Sepal length by Species\")\nplt.show()\n\n\n\n\n\n\n\n\n\nA box plot is a standardized way of displaying the distribution of data based on a five-number summary: minimum, first quartile (Q1), median, third quartile (Q3), and maximum. It also highlights outliers, if any. Box Plot Interpretation Iris-setosa:- Median (Q2): The central line inside the box represents the median sepal length. Interquartile Range (IQR): The box represents the range between the first quartile (Q1) and the third quartile (Q3). Whiskers: The lines extending from the box show the range of the data within 1.5 times the IQR from Q1 and Q3. Data points outside this range are considered outliers. Outliers: Points outside the whiskers, if any, represent outliers in the sepal length distribution. Iris-versicolor:- The median sepal length is higher than that of Iris-setosa. The IQR is larger, indicating more variability in sepal lengths. The whiskers and potential outliers provide insight into the spread and extremes of the data. Iris-virginica:- The median sepal length is the highest among the three species. The IQR is comparable to Iris-versicolor but larger than Iris-setosa, indicating substantial variability. The whiskers and any outliers show the spread and extremities of the sepal length for this species. The box plot provides a clear visual comparison of the sepal lengths across the three Iris species: Iris-setosa has the shortest sepal lengths, with minimal variability. Iris-versicolor has moderate sepal lengths with greater variability compared to Iris-setosa. Iris-virginica has the longest sepal lengths with significant variability. This visualization is useful for understanding the distribution and spread of sepal lengths within and across the species, highlighting the central tendency and variability, as well as any potential outliers in the data.\n\n\nCode\n# Box plot\nsns.boxplot(data, x=\"class\", y=\"petal width\",hue='class', palette=\"Set3\")\nplt.title(\"Box Plot of petal Width by Species\")\nplt.show()\n\n\n\n\n\n\n\n\n\nThe box plot provides a clear visual comparison of the petal widths across the three Iris species: Iris-setosa has the narrowest range of petal widths, with the lowest median value and the least variability. Iris-versicolor has a wider range of petal widths with a higher median compared to Iris-setosa. Iris-virginica has the widest range and the highest median value of petal widths, indicating significant variability within the species.\n\n\nCode\n# Box plot\nsns.boxplot(data, x=\"class\", y=\"petal length\",hue='class', palette=\"Set3\")\nplt.title(\"Box Plot of petal length by Species\")\nplt.show()\n\n\n\n\n\n\n\n\n\nThe box plot provides a clear visual comparison of the petal lengths across the three Iris species: Iris-setosa has the narrowest range of petal lengths, with the lowest median value and the least variability. Iris-versicolor has a wider range of petal lengths with a higher median compared to Iris-setosa. Iris-virginica has the widest range and the highest median value of petal lengths, indicating significant variability within the species. This visualization is useful for understanding the distribution and spread of petal lengths within and across the species, highlighting the central tendency and variability, as well as any potential outliers in the data.\n\n\nCode\n# Compute the correlation matrix\ncorrelation_matrix = num_df.corr()\n\n# Create a heatmap\nplt.figure(figsize=(8, 6))\nsns.heatmap(correlation_matrix, annot=True, cmap=\"coolwarm\", vmin=-1, vmax=1)\nplt.title(\"Correlation Matrix of Iris Dataset\")\nplt.show()\n\nsns.pairplot(data, hue=\"class\", palette=\"Set2\", markers=[\"o\", \"s\", \"D\"])\n\n# Set the title for the entire plot\nplt.suptitle(\"Scatter Plot Matrix of Iris Dataset\", y=1.02)\nplt.show()"
  },
  {
    "objectID": "posts/Iris Data/Report.html#scatter",
    "href": "posts/Iris Data/Report.html#scatter",
    "title": "Report On Iris Data",
    "section": "Scatter",
    "text": "Scatter\n\n\nCode\n# Read the .dat file\ndef scatter_plot_for_each_column(num_df):\n    # Plot scatter plots for each pair of numeric columns\n    color = ['r','g']\n    color_map = [color[i%len(color)]for i in range(len(num_df))]\n    for column1 in num_df.columns:\n        for column2 in num_df.columns:\n            if column1 != column2:\n                plt.figure(figsize=(8, 6))\n                plt.scatter(num_df[column1], num_df[column2], alpha=0.7)\n                plt.title(f'Scatter Plot of {column1} vs {column2}')\n                plt.xlabel(column1)\n                plt.ylabel(column2)\n                plt.show()\n# Scatter Plot\nscatter_plot_for_each_column(num_df)"
  },
  {
    "objectID": "posts/Iris Data/Report.html#line-plot",
    "href": "posts/Iris Data/Report.html#line-plot",
    "title": "Report On Iris Data",
    "section": "line plot",
    "text": "line plot\n\n\nCode\ndef line_plot_for_each_column(num_df):\n    # Plot the data for each column of data\n    plt.figure(figsize=(10, 6))\n\n    for column in num_df.columns:\n        if pd.api.types.is_numeric_dtype(num_df[column]):\n            plt.plot(num_df.index, num_df[column], marker='o', label=column)\n\n    plt.title('Line Plot of Numeric Columns')\n    plt.xlabel('Index')\n    plt.ylabel('Values')\n    plt.legend()\n    plt.show()\n# Line_plot\nline_plot_for_each_column(num_df)"
  },
  {
    "objectID": "posts/Iris Data/Report.html#histogram-plot",
    "href": "posts/Iris Data/Report.html#histogram-plot",
    "title": "Report On Iris Data",
    "section": "Histogram Plot",
    "text": "Histogram Plot\n\n\nCode\n# Set up the FacetGrid for Sepal Length\ng = sns.FacetGrid(data, col=\"class\", margin_titles=True, col_wrap=3)\ng.map(plt.hist, \"sepal length\", bins=10, color=\"yellow\", edgecolor=\"black\")\ng.fig.suptitle(\"Histogram of Sepal Length by Species\", y=1.05)\nplt.show()\n\n\n\n\n\n\n\n\n\n\nRelation between the class and sepal width\n\nThis plot shows the distribution of sepal widths for each species of the Iris flower. Each subplot represents a different species, allowing for a comparison of sepal width distributions.\n\n Iris-setosa:-\n\nThe sepal widths are mostly between 3.0 and 4.0 cm. This species tends to have wider sepals compared to the other two. Iris-versicolor:-\n\n\n\nThe sepal widths are distributed between 2.5 and 3.5 cm, with a peak around 2.8 to 3.0 cm.\n\n Iris-virginica:-\n\nThe sepal widths range from 2.5 to 3.5 cm, with a slight peak around 3.0 cm, similar to Iris-versicolor.\n\n\n\n\nCode\n# Set up the FacetGrid for Sepal Width\ng = sns.FacetGrid(data, col=\"class\", margin_titles=True, col_wrap=3)\ng.map(plt.hist, \"sepal width\", bins=10, color=\"steelblue\", edgecolor=\"black\")\ng.fig.suptitle(\"Histogram of Sepal Width by Species\", y=1.05)\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Set up the FacetGrid for Petal Length\ng = sns.FacetGrid(data, col=\"class\", margin_titles=True, col_wrap=3)\ng.map(plt.hist, \"petal length\", bins=10, color=\"steelblue\", edgecolor=\"black\")\ng.fig.suptitle(\"Histogram of Petal Length by Species\", y=1.05)\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Set up the FacetGrid for Petal Width\ng = sns.FacetGrid(data, col=\"class\", margin_titles=True, col_wrap=3)\ng.map(plt.hist, \"petal width\", bins=10, color=\"steelblue\", edgecolor=\"black\")\ng.fig.suptitle(\"Histogram of Petal Width by Species\", y=1.05)\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Scatter plot for Sepal Length vs. Sepal Width\nsns.scatterplot(data, x=\"sepal length\", y=\"sepal width\", hue=\"class\", palette=\"Set1\", edgecolor=\"black\")\nplt.title(\"Sepal Length vs. Sepal Width by Species\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Scatter plot for Petal Length vs. Petal Width\nsns.scatterplot(data, x=\"petal length\", y=\"petal width\", hue=\"class\", palette=\"Set1\", edgecolor=\"black\")\nplt.title(\"Petal Length vs. Petal Width by Species\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Scatter plot for Sepal Length vs. Petal Length\nsns.scatterplot(data, x=\"sepal length\", y=\"petal length\", hue=\"class\", palette=\"Set1\", edgecolor=\"black\")\nplt.title(\"Sepal Length vs. Petal Length by Species\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Box plot\nsns.boxplot(data, x=\"class\", y=\"sepal width\",hue='class', palette=\"Set3\")\nplt.title(\"Box Plot of Sepal Width by Species\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Box plot\nsns.boxplot(data, x=\"class\", y=\"sepal length\",hue='class', palette=\"Set3\")\nplt.title(\"Box Plot of Sepal Width by Species\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Box plot\nsns.boxplot(data, x=\"class\", y=\"petal width\",hue='class', palette=\"Set3\")\nplt.title(\"Box Plot of Sepal Width by Species\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Box plot\nsns.boxplot(data, x=\"class\", y=\"petal length\",hue='class', palette=\"Set3\")\nplt.title(\"Box Plot of Sepal Width by Species\")\nplt.show()"
  },
  {
    "objectID": "posts/Iris Data/Report.html#relation-between-the-class-and-sepal",
    "href": "posts/Iris Data/Report.html#relation-between-the-class-and-sepal",
    "title": "Report On Iris Data",
    "section": "Relation between the class and sepal",
    "text": "Relation between the class and sepal\nThis plot shows the distribution of sepal widths for each species of the Iris flower. Each subplot represents a different species, allowing for a comparison of sepal width distributions. Iris-setosa:- The sepal widths are mostly between 3.0 and 4.0 cm. This species tends to have wider sepals compared to the other two. Iris-versicolor:- The sepal widths are distributed between 2.5 and 3.5 cm, with a peak around 2.8 to 3.0 cm. Iris-virginica:- The sepal widths range from 2.5 to 3.5 cm, with a slight peak around 3.0 cm, similar to Iris-versicolor.\n\n\nCode\n# Set up the FacetGrid for Sepal Width\ng = sns.FacetGrid(data, col=\"class\", margin_titles=True, col_wrap=3)\ng.map(plt.hist, \"sepal width\", bins=10, color=\"steelblue\", edgecolor=\"black\")\ng.fig.suptitle(\"Histogram of Sepal Width by Species\", y=1.05)\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Set up the FacetGrid for Petal Length\ng = sns.FacetGrid(data, col=\"class\", margin_titles=True, col_wrap=3)\ng.map(plt.hist, \"petal length\", bins=10, color=\"steelblue\", edgecolor=\"black\")\ng.fig.suptitle(\"Histogram of Petal Length by Species\", y=1.05)\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Set up the FacetGrid for Petal Width\ng = sns.FacetGrid(data, col=\"class\", margin_titles=True, col_wrap=3)\ng.map(plt.hist, \"petal width\", bins=10, color=\"steelblue\", edgecolor=\"black\")\ng.fig.suptitle(\"Histogram of Petal Width by Species\", y=1.05)\nplt.show()"
  },
  {
    "objectID": "posts/Iris Data/Report.html#relation-between-the-class-and-sepal-width",
    "href": "posts/Iris Data/Report.html#relation-between-the-class-and-sepal-width",
    "title": "Report On Iris Data",
    "section": "Relation between the class and sepal width",
    "text": "Relation between the class and sepal width\nThis plot shows the distribution of sepal widths for each species of the Iris flower. Each subplot represents a different species, allowing for a comparison of sepal width distributions. ### Iris-setosa:- The sepal widths are mostly between 3.0 and 4.0 cm. This species tends to have wider sepals compared to the other two. ### Iris-versicolor:- The sepal widths are distributed between 2.5 and 3.5 cm, with a peak around 2.8 to 3.0 cm. ### Iris-virginica:- The sepal widths range from 2.5 to 3.5 cm, with a slight peak around 3.0 cm, similar to Iris-versicolor.\n\n\nCode\n# Set up the FacetGrid for Sepal Width\ng = sns.FacetGrid(data, col=\"class\", margin_titles=True, col_wrap=3)\ng.map(plt.hist, \"sepal width\", bins=10, color=\"steelblue\", edgecolor=\"black\")\ng.fig.suptitle(\"Histogram of Sepal Width by Species\", y=1.05)\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Set up the FacetGrid for Petal Length\ng = sns.FacetGrid(data, col=\"class\", margin_titles=True, col_wrap=3)\ng.map(plt.hist, \"petal length\", bins=10, color=\"steelblue\", edgecolor=\"black\")\ng.fig.suptitle(\"Histogram of Petal Length by Species\", y=1.05)\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Set up the FacetGrid for Petal Width\ng = sns.FacetGrid(data, col=\"class\", margin_titles=True, col_wrap=3)\ng.map(plt.hist, \"petal width\", bins=10, color=\"steelblue\", edgecolor=\"black\")\ng.fig.suptitle(\"Histogram of Petal Width by Species\", y=1.05)\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Scatter plot for Sepal Length vs. Sepal Width\nsns.scatterplot(data, x=\"sepal length\", y=\"sepal width\", hue=\"class\", palette=\"Set1\", edgecolor=\"black\")\nplt.title(\"Sepal Length vs. Sepal Width by Species\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Scatter plot for Petal Length vs. Petal Width\nsns.scatterplot(data, x=\"petal length\", y=\"petal width\", hue=\"class\", palette=\"Set1\", edgecolor=\"black\")\nplt.title(\"Petal Length vs. Petal Width by Species\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Scatter plot for Sepal Length vs. Petal Length\nsns.scatterplot(data, x=\"sepal length\", y=\"petal length\", hue=\"class\", palette=\"Set1\", edgecolor=\"black\")\nplt.title(\"Sepal Length vs. Petal Length by Species\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Box plot\nsns.boxplot(data, x=\"class\", y=\"sepal width\",hue='class', palette=\"Set3\")\nplt.title(\"Box Plot of Sepal Width by Species\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Box plot\nsns.boxplot(data, x=\"class\", y=\"sepal length\",hue='class', palette=\"Set3\")\nplt.title(\"Box Plot of Sepal Width by Species\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Box plot\nsns.boxplot(data, x=\"class\", y=\"petal width\",hue='class', palette=\"Set3\")\nplt.title(\"Box Plot of Sepal Width by Species\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Box plot\nsns.boxplot(data, x=\"class\", y=\"petal length\",hue='class', palette=\"Set3\")\nplt.title(\"Box Plot of Sepal Width by Species\")\nplt.show()"
  },
  {
    "objectID": "posts/Iris Data/Report.html#iris-setosa-",
    "href": "posts/Iris Data/Report.html#iris-setosa-",
    "title": "Report On Iris Data",
    "section": "Iris-setosa:-",
    "text": "Iris-setosa:-\nThe sepal widths are mostly between 3.0 and 4.0 cm. This species tends to have wider sepals compared to the other two."
  },
  {
    "objectID": "posts/Iris Data/Report.html#iris-versicolor-",
    "href": "posts/Iris Data/Report.html#iris-versicolor-",
    "title": "Report On Iris Data",
    "section": "Iris-versicolor:-",
    "text": "Iris-versicolor:-\nThe sepal widths are distributed between 2.5 and 3.5 cm, with a peak around 2.8 to 3.0 cm."
  },
  {
    "objectID": "posts/Iris Data/Report.html#iris-virginica-",
    "href": "posts/Iris Data/Report.html#iris-virginica-",
    "title": "Report On Iris Data",
    "section": "Iris-virginica:-",
    "text": "Iris-virginica:-\nThe sepal widths range from 2.5 to 3.5 cm, with a slight peak around 3.0 cm, similar to Iris-versicolor.\n\n\nCode\n# Set up the FacetGrid for Sepal Width\ng = sns.FacetGrid(data, col=\"class\", margin_titles=True, col_wrap=3)\ng.map(plt.hist, \"sepal width\", bins=10, color=\"steelblue\", edgecolor=\"black\")\ng.fig.suptitle(\"Histogram of Sepal Width by Species\", y=1.05)\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Set up the FacetGrid for Petal Length\ng = sns.FacetGrid(data, col=\"class\", margin_titles=True, col_wrap=3)\ng.map(plt.hist, \"petal length\", bins=10, color=\"steelblue\", edgecolor=\"black\")\ng.fig.suptitle(\"Histogram of Petal Length by Species\", y=1.05)\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Set up the FacetGrid for Petal Width\ng = sns.FacetGrid(data, col=\"class\", margin_titles=True, col_wrap=3)\ng.map(plt.hist, \"petal width\", bins=10, color=\"steelblue\", edgecolor=\"black\")\ng.fig.suptitle(\"Histogram of Petal Width by Species\", y=1.05)\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Scatter plot for Sepal Length vs. Sepal Width\nsns.scatterplot(data, x=\"sepal length\", y=\"sepal width\", hue=\"class\", palette=\"Set1\", edgecolor=\"black\")\nplt.title(\"Sepal Length vs. Sepal Width by Species\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Scatter plot for Petal Length vs. Petal Width\nsns.scatterplot(data, x=\"petal length\", y=\"petal width\", hue=\"class\", palette=\"Set1\", edgecolor=\"black\")\nplt.title(\"Petal Length vs. Petal Width by Species\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Scatter plot for Sepal Length vs. Petal Length\nsns.scatterplot(data, x=\"sepal length\", y=\"petal length\", hue=\"class\", palette=\"Set1\", edgecolor=\"black\")\nplt.title(\"Sepal Length vs. Petal Length by Species\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Box plot\nsns.boxplot(data, x=\"class\", y=\"sepal width\",hue='class', palette=\"Set3\")\nplt.title(\"Box Plot of Sepal Width by Species\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Box plot\nsns.boxplot(data, x=\"class\", y=\"sepal length\",hue='class', palette=\"Set3\")\nplt.title(\"Box Plot of Sepal Width by Species\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Box plot\nsns.boxplot(data, x=\"class\", y=\"petal width\",hue='class', palette=\"Set3\")\nplt.title(\"Box Plot of Sepal Width by Species\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Box plot\nsns.boxplot(data, x=\"class\", y=\"petal length\",hue='class', palette=\"Set3\")\nplt.title(\"Box Plot of Sepal Width by Species\")\nplt.show()"
  },
  {
    "objectID": "posts/Iris Data/Report.html#descriptive-statistics",
    "href": "posts/Iris Data/Report.html#descriptive-statistics",
    "title": "Report On Iris Data",
    "section": "Descriptive Statistics",
    "text": "Descriptive Statistics\n\n\nCode\ndef descriptive_statistics(num):\n    # Calculate and print descriptive statistics for each numeric column\n    print(\"Descriptive Statistics:\\n\")\n    for column in num.columns:\n        print(f\"Statistics for {column}\")\n        print('--------------------------------')\n        print(f\"Mean: {num[column].mean()}\")\n        print(f\"Median: {num[column].median()}\")\n        print(f\"Mode: {num[column].mode().iloc[0]}\")\n        print(f\"Standard Deviation: {num[column].std()}\")\n        print(f\"Variance: {num[column].var()}\")\n        print(f\"Minimum: {num[column].min()}\")\n        print(f\"Maximum: {num[column].max()}\")\n        print(f\"Count: {num[column].count()}\")\n#calling descriptive statistics\ndescriptive_statistics(num_df)\n\n\nDescriptive Statistics:\n\nStatistics for sepal length\n--------------------------------\nMean: 5.843333333333334\nMedian: 5.8\nMode: 5.0\nStandard Deviation: 0.828066127977863\nVariance: 0.6856935123042507\nMinimum: 4.3\nMaximum: 7.9\nCount: 150\nStatistics for sepal width\n--------------------------------\nMean: 3.0540000000000003\nMedian: 3.0\nMode: 3.0\nStandard Deviation: 0.4335943113621737\nVariance: 0.1880040268456376\nMinimum: 2.0\nMaximum: 4.4\nCount: 150\nStatistics for petal length\n--------------------------------\nMean: 3.758666666666666\nMedian: 4.35\nMode: 1.5\nStandard Deviation: 1.7644204199522626\nVariance: 3.113179418344519\nMinimum: 1.0\nMaximum: 6.9\nCount: 150\nStatistics for petal width\n--------------------------------\nMean: 1.1986666666666668\nMedian: 1.3\nMode: 0.2\nStandard Deviation: 0.7631607417008411\nVariance: 0.582414317673378\nMinimum: 0.1\nMaximum: 2.5\nCount: 150\n\n\n\nHistogram Plot"
  },
  {
    "objectID": "posts/Iris Data/Report.html#plot-for-sepal-length",
    "href": "posts/Iris Data/Report.html#plot-for-sepal-length",
    "title": "Report On Iris Data",
    "section": "Plot for Sepal Length",
    "text": "Plot for Sepal Length\n\n\nCode\n# Set up the FacetGrid for Sepal Length\ng = sns.FacetGrid(data, col=\"class\", margin_titles=True, col_wrap=3)\ng.map(plt.hist, \"sepal length\", bins=10, color=\"steelblue\", edgecolor=\"black\")\ng.fig.suptitle(\"Histogram of Sepal Length by Species\", y=1.05)\nplt.show()\n\n\n\n\n\n\n\n\n\nThe above plot shows the distribution of sepal lengths for each species of the Iris flower (setosa, versicolor, and virginica). Each subplot represents a different species, allowing for an easy comparison of sepal length distributions between the species. Iris-setosa:-The sepal lengths are mostly concentrated between 4.5 and 5.5 cm. The distribution appears to be more tightly clustered compared to the other species. Iris-versicolor:-The sepal lengths are more spread out, typically ranging from 5.0 to 7.0 cm, with a peak around 5.5 to 6.0 cm. Iris-virginica:- The sepal lengths show a broader distribution, generally ranging from 6.0 to 7.5 cm. This species has the longest sepals on average.\n\nPlot for Sepal Width\n\n\nCode\n# Set up the FacetGrid for Sepal Width\ng = sns.FacetGrid(data, col=\"class\", margin_titles=True, col_wrap=3)\ng.map(plt.hist, \"sepal width\", bins=10, color=\"steelblue\", edgecolor=\"black\")\ng.fig.suptitle(\"Histogram of Sepal Width by Species\", y=1.05)\nplt.show()\n\n\n\n\n\n\n\n\n\nThe above plot shows the distribution of sepal width for each iris class. Each subplot represents a different species, allowing comparison of sepal width distribution. Iris-setosa:-The sepal width are mostly between 3.0 and 4.0 cm. This iris_setosa tends to have wider sepals compared to the other two. Iris-versicolor:-The sepal width are distributed between 2.5 and 3.5 cm, with a peak around 2.8 to 3.0 cm. Iris-virginica:-The sepal widths range from 2.5 to 3.5 cm, with a slight peak around 3.0 cm, similar to Iris-versicolor.\n\n\nPlot for Petal Length\n\n\nCode\n# Set up the FacetGrid for Petal Length\ng = sns.FacetGrid(data, col=\"class\", margin_titles=True, col_wrap=3)\ng.map(plt.hist, \"petal length\", bins=10, color=\"steelblue\", edgecolor=\"black\")\ng.fig.suptitle(\"Histogram of Petal Length by Species\", y=1.05)\nplt.show()\n\n\n\n\n\n\n\n\n\nThe above plot shows the distribution of petal lengths for each species of the Iris flower.\nIris-setosa:- The petal lengths are mostly concentrated between 1.0 and 1.5 cm, indicating shorter petals for this species. Iris-versicolor:- The petal lengths are more spread out, typically ranging from 3.0 to 5.0 cm, with a peak around 4.0 to 4.5 cm. Iris-virginica:- The petal lengths show a broader distribution, generally ranging from 4.5 to 6.5 cm. This species has the longest petals on average.\n\n\nPlot for Petal width\n\n\nCode\n# Set up the FacetGrid for Petal Width\ng = sns.FacetGrid(data, col=\"class\", margin_titles=True, col_wrap=3)\ng.map(plt.hist, \"petal width\", bins=10, color=\"steelblue\", edgecolor=\"black\")\ng.fig.suptitle(\"Histogram of Petal Width by Species\", y=1.05)\nplt.show()\n\n\n\n\n\n\n\n\n\nThe above plot shows the distribution of petal widths for each species of the Iris flower.\nIris-setosa:- The petal widths are mostly concentrated between 0.1 and 0.3 cm, indicating narrower petals for this species. Iris-versicolor:- The petal widths are more spread out, typically ranging from 1.0 to 1.5 cm, with a peak around 1.3 cm. Iris-virginica:- The petal widths show a broader distribution, generally ranging from 1.5 to 2.5 cm. This species has the widest petals on average"
  },
  {
    "objectID": "posts/Iris Data/Report.html#plot-for-petal-length",
    "href": "posts/Iris Data/Report.html#plot-for-petal-length",
    "title": "Report On Iris Data",
    "section": "Plot for Petal Length",
    "text": "Plot for Petal Length\n\n\nCode\n# Set up the FacetGrid for Petal Length\ng = sns.FacetGrid(data, col=\"class\", margin_titles=True, col_wrap=3)\ng.map(plt.hist, \"petal length\", bins=10, color=\"steelblue\", edgecolor=\"black\")\ng.fig.suptitle(\"Histogram of Petal Length by Species\", y=1.05)\nplt.show()\n\n\n\n\n\n\n\n\n\nThe above plot shows the distribution of petal lengths for each species of the Iris flower.\nIris-setosa:- \n\nThe petal lengths are mostly concentrated between 1.0 and 1.5 cm, indicating shorter petals for this species.\n\n Iris-versicolor:- \n\nThe petal lengths are more spread out, typically ranging from 3.0 to 5.0 cm, with a peak around 4.0 to 4.5 cm.\n\n Iris-virginica:- \n\nThe petal lengths show a broader distribution, generally ranging from 4.5 to 6.5 cm. This species has the longest petals on average.\n\n\n\nPlot for Petal width\n\n\nCode\n# Set up the FacetGrid for Petal Width\ng = sns.FacetGrid(data, col=\"class\", margin_titles=True, col_wrap=3)\ng.map(plt.hist, \"petal width\", bins=10, color=\"steelblue\", edgecolor=\"black\")\ng.fig.suptitle(\"Histogram of Petal Width by Species\", y=1.05)\nplt.show()\n\n\n\n\n\n\n\n\n\nThe above plot shows the distribution of petal widths for each species of the Iris flower.\nIris-setosa:- The petal widths are mostly concentrated between 0.1 and 0.3 cm, indicating narrower petals for this species. Iris-versicolor:- The petal widths are more spread out, typically ranging from 1.0 to 1.5 cm, with a peak around 1.3 cm. Iris-virginica:- The petal widths show a broader distribution, generally ranging from 1.5 to 2.5 cm. This species has the widest petals on average"
  },
  {
    "objectID": "posts/Iris Data/Report.html#scatter-plot",
    "href": "posts/Iris Data/Report.html#scatter-plot",
    "title": "Report On Iris Data",
    "section": "Scatter Plot",
    "text": "Scatter Plot\n\nHere i created a scatter plots to visualize the relationships between the features in the Iris dataset, with each species represented by a different color. We’ll create scatter plots for the following pairs of features:\n\n\nCode\n# Scatter plot for Sepal Length vs. Sepal Width\nsns.scatterplot(data, x=\"sepal length\", y=\"sepal width\", hue=\"class\", palette=\"Set1\", edgecolor=\"black\")\nplt.title(\"Sepal Length vs. Sepal Width by Species\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Scatter plot for Petal Length vs. Petal Width\nsns.scatterplot(data, x=\"petal length\", y=\"petal width\", hue=\"class\", palette=\"Set1\", edgecolor=\"black\")\nplt.title(\"Petal Length vs. Petal Width by Species\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Scatter plot for Sepal Length vs. Petal Length\nsns.scatterplot(data, x=\"sepal length\", y=\"petal length\", hue=\"class\", palette=\"Set1\", edgecolor=\"black\")\nplt.title(\"Sepal Length vs. Petal Length by Species\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Box plot\nsns.boxplot(data, x=\"class\", y=\"sepal width\",hue='class', palette=\"Set3\")\nplt.title(\"Box Plot of Sepal Width by Species\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Box plot\nsns.boxplot(data, x=\"class\", y=\"sepal length\",hue='class', palette=\"Set3\")\nplt.title(\"Box Plot of Sepal Width by Species\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Box plot\nsns.boxplot(data, x=\"class\", y=\"petal width\",hue='class', palette=\"Set3\")\nplt.title(\"Box Plot of Sepal Width by Species\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Box plot\nsns.boxplot(data, x=\"class\", y=\"petal length\",hue='class', palette=\"Set3\")\nplt.title(\"Box Plot of Sepal Width by Species\")\nplt.show()"
  },
  {
    "objectID": "posts/Iris Data/Report.html#iris-dataset",
    "href": "posts/Iris Data/Report.html#iris-dataset",
    "title": "Report On Iris Data",
    "section": "",
    "text": "Here, Dataset shows the class and features Class:-iris_setosa,iris_versicolor,iris_verginica Features:-Sepal_length,Sepal_width,petal_length,petal_width\n\n\nCode\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport nbformat\n\n# Read the .dat file\ndata = pd.read_csv('iris.data', delimiter=',')\ndata.to_excel('iris.xlsx', index=False)\nprint(data)\nnum_df = data.select_dtypes(include = 'number')\n\n\n     sepal length  sepal width  petal length  petal width           class\n0             5.1          3.5           1.4          0.2     Iris-setosa\n1             4.9          3.0           1.4          0.2     Iris-setosa\n2             4.7          3.2           1.3          0.2     Iris-setosa\n3             4.6          3.1           1.5          0.2     Iris-setosa\n4             5.0          3.6           1.4          0.2     Iris-setosa\n..            ...          ...           ...          ...             ...\n145           6.7          3.0           5.2          2.3  Iris-virginica\n146           6.3          2.5           5.0          1.9  Iris-virginica\n147           6.5          3.0           5.2          2.0  Iris-virginica\n148           6.2          3.4           5.4          2.3  Iris-virginica\n149           5.9          3.0           5.1          1.8  Iris-virginica\n\n[150 rows x 5 columns]"
  },
  {
    "objectID": "posts/cv/Cv.html",
    "href": "posts/cv/Cv.html",
    "title": "Ganta Preethi",
    "section": "",
    "text": "Experienced and dedicated Data Analyst with several years of experience identifying efficiencies and problem areas within data streams while communicating needs for projects. Adept at receiving and monitoring data from multiple streams, including Access, SQL, and Excel data sources. Ability to synthesize quantitative information and interact effectively with colleagues and clients. Proven track record of generating summary documents for senior management for monthly and quarterly audit and compliance reporting."
  },
  {
    "objectID": "posts/cv/Cv.html#profile",
    "href": "posts/cv/Cv.html#profile",
    "title": "Ganta Preethi",
    "section": "",
    "text": "Experienced and dedicated Data Analyst with several years of experience identifying efficiencies and problem areas within data streams while communicating needs for projects. Adept at receiving and monitoring data from multiple streams, including Access, SQL, and Excel data sources. Ability to synthesize quantitative information and interact effectively with colleagues and clients. Proven track record of generating summary documents for senior management for monthly and quarterly audit and compliance reporting."
  },
  {
    "objectID": "posts/cv/Cv.html#employment-history",
    "href": "posts/cv/Cv.html#employment-history",
    "title": "Ganta Preethi",
    "section": "Employment History",
    "text": "Employment History\n\nCompleted internship on Python for Data Science in 1Stop.ai.\nCompleted internship on Cyber Security in 1Stop.ai."
  },
  {
    "objectID": "posts/cv/Cv.html#education",
    "href": "posts/cv/Cv.html#education",
    "title": "Ganta Preethi",
    "section": "Education",
    "text": "Education\nMaster of Information Assurance and Systems, Wilmington University, Wilmington\n\nGraduated in the top 5% of my class.\nGPA: 3.95 (Till Now)\n\nBachelor of Computer Sciences, Bapatla Women’s Engineering College, Bapatla\n\nGPA: 3.91"
  },
  {
    "objectID": "posts/cv/Cv.html#projects",
    "href": "posts/cv/Cv.html#projects",
    "title": "Ganta Preethi",
    "section": "Projects",
    "text": "Projects\n\nMouseLess Cursor using Facial Movements\nThe main objective of mouseless cursor control using facial movement is to provide an alternative method for computer users who are unable to use a traditional mouse due to physical limitations or disabilities. By using facial movements, users can more easily navigate their computer screens.\n\n\nObject Tracking Using Camshift Algorithm\nIt is an application of deep learning which is used to develop a unique identification for each of the initial detections and then track the detected objects as they move around frames in video.\n\n\nAutomatic Text Generation Using LSTM\nLSTM-based automatic text generation involves training a neural network to learn patterns in a dataset and generate new text based on those patterns. The objective is to minimize the difference between the generated and actual text using a loss function."
  },
  {
    "objectID": "posts/cv/Cv.html#details",
    "href": "posts/cv/Cv.html#details",
    "title": "Ganta Preethi",
    "section": "Details",
    "text": "Details\n\nEmail: preethiganta007@gmail.com\nContact: +1 (302) 409-5927\nLinkedIn: https://www.linkedin.com/in/preethi-g-4b414b28b"
  },
  {
    "objectID": "posts/cv/Cv.html#skills",
    "href": "posts/cv/Cv.html#skills",
    "title": "Ganta Preethi",
    "section": "Skills",
    "text": "Skills\n\nPython Programming\nC Programming\nSQL\nDBMS\nAWS\nLeadership Skills\nData Clean-ups\nPowerBI\nMicrosoft Office\nAgile Methodologies\nData Analytics\nGoogle Sheets"
  },
  {
    "objectID": "posts/cv/Cv.html#languages",
    "href": "posts/cv/Cv.html#languages",
    "title": "Ganta Preethi",
    "section": "Languages",
    "text": "Languages\n\nEnglish\nTelugu"
  },
  {
    "objectID": "posts/wine data/wine.html",
    "href": "posts/wine data/wine.html",
    "title": "Report on Wine Data",
    "section": "",
    "text": "Wine\n\n\n\n\nThe Wine data consists of measurements of various chemical properties of different types of wine. It is organized in a tabular format with multiple columns, each representing a specific property, and rows representing different wine samples.\n\n\n\nColumns in wine data:\nclass: Class label (1, 2, or 3) representing different types of wine. Alcohol Malicacid Ash Alcalinity_of_ash Magnesium Total_phenols Flavanoids Nonflavanoid_phenols Proanthocyanins Color_intensity Hue 0D280_0D315_of_diluted_wines Proline\n\n\n\nDescriptive Statistics for wine data set\n\n\nCode\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport nbformat\n\n\ndata = pd.read_csv('wine.data', delimiter=',', engine='python' )\ndata.to_excel('wine.xlsx', index=False)\ncolumns = data.columns[data.columns != 'class']    \ngrpdata = data.groupby([\"class\"])\n\ndef statistics(data):\n        #numeric_columns = data.select_dtypes(include=['number']).columns\n        #print(numeric_columns)\n        mean_value = grpdata.mean(numeric_only= True)\n        median_value = grpdata.median(numeric_only= True)\n        mode_value = grpdata.apply(lambda x: x.mode().iloc[0] if not x.mode().empty else None, include_groups=False)\n        #mode_value = grpdata.mode().iloc[0]         \n        # Using f-strings to format the output\n        print(f\"Mean value for each column: \\n{mean_value}\")\n        print(\"==========================================================\")\n        print(f\"Median value for each column: \\n{median_value}\")\n        print('===========================================================')\n        print(f\"Mode value for each column: \\n{mode_value}\")     \n        for column in columns:\n            total_sum = grpdata[column].sum()     \n            std_value = grpdata[column].std()     \n            count_value = grpdata[column].count()\n            max_value = grpdata[column].max()\n            min_value = grpdata[column].min()\n            print(\"=========================================================\")\n            print(f\"Total sum of '{column}': {total_sum}\")\n            print(f\"Standard Deviation of '{column}': {std_value}\")\n            print(f\"Count value of '{column}': {count_value}\")\n            print(f\"Max Value of '{column}': {max_value}\")\n            print(f\"Min Value of '{column}': {min_value}\")\n        return mean_value, median_value, mode_value\n\nmean_value, median_value, mode_value = statistics(data)\n\n\nMean value for each column: \n         Alcohol  Malicacid       ash  Alcalinity_ofash   Magnesium  \\\nclass                                                                 \n1      13.744746   2.010678  2.455593         17.037288  106.338983   \n2      12.278732   1.932676  2.244789         20.238028   94.549296   \n3      13.153750   3.333750  2.437083         21.416667   99.312500   \n\n       Totalphenols  Flavanoids  Nonflavanoidphenols  Proanthocyanins  \\\nclass                                                                   \n1          2.840169    2.982373             0.290000         1.899322   \n2          2.258873    2.080845             0.363662         1.630282   \n3          1.678750    0.781458             0.447500         1.153542   \n\n       Colorintensity       Hue  0D280_0D315_of_diluted_wines      Proline  \nclass                                                                       \n1            5.528305  1.062034                      3.157797  1115.711864  \n2            3.086620  1.056282                      2.785352   519.507042  \n3            7.396250  0.682708                      1.683542   629.895833  \n==========================================================\nMedian value for each column: \n       Alcohol  Malicacid   ash  Alcalinity_ofash  Magnesium  Totalphenols  \\\nclass                                                                        \n1       13.750      1.770  2.44              16.8      104.0         2.800   \n2       12.290      1.610  2.24              20.0       88.0         2.200   \n3       13.165      3.265  2.38              21.0       97.0         1.635   \n\n       Flavanoids  Nonflavanoidphenols  Proanthocyanins  Colorintensity  \\\nclass                                                                     \n1           2.980                 0.29            1.870            5.40   \n2           2.030                 0.37            1.610            2.90   \n3           0.685                 0.47            1.105            7.55   \n\n         Hue  0D280_0D315_of_diluted_wines  Proline  \nclass                                                \n1      1.070                          3.17   1095.0  \n2      1.040                          2.83    495.0  \n3      0.665                          1.66    627.5  \n===========================================================\nMode value for each column: \n0      Alcohol  Malicacid   ash  Alcalinity_ofash  Magnesium  Totalphenols  \\\nclass                                                                        \n1        13.05       1.73  2.36              16.0      101.0          3.00   \n2        12.37       1.51  1.92              18.0       86.0          2.20   \n3        12.25       3.03  2.48              20.0       88.0          1.48   \n\n0      Flavanoids  Nonflavanoidphenols  Proanthocyanins  Colorintensity   Hue  \\\nclass                                                                           \n1            2.68                 0.26             1.66             5.1  1.04   \n2            2.03                 0.37             1.35             2.6  1.23   \n3            0.58                 0.53             0.94             5.0  0.57   \n\n0      0D280_0D315_of_diluted_wines  Proline  \nclass                                         \n1                              3.00   1035.0  \n2                              2.78    450.0  \n3                              1.33    520.0  \n=========================================================\nTotal sum of 'Alcohol': class\n1    810.94\n2    871.79\n3    631.38\nName: Alcohol, dtype: float64\nStandard Deviation of 'Alcohol': class\n1    0.462125\n2    0.537964\n3    0.530241\nName: Alcohol, dtype: float64\nCount value of 'Alcohol': class\n1    59\n2    71\n3    48\nName: Alcohol, dtype: int64\nMax Value of 'Alcohol': class\n1    14.83\n2    13.86\n3    14.34\nName: Alcohol, dtype: float64\nMin Value of 'Alcohol': class\n1    12.85\n2    11.03\n3    12.20\nName: Alcohol, dtype: float64\n=========================================================\nTotal sum of 'Malicacid': class\n1    118.63\n2    137.22\n3    160.02\nName: Malicacid, dtype: float64\nStandard Deviation of 'Malicacid': class\n1    0.688549\n2    1.015569\n3    1.087906\nName: Malicacid, dtype: float64\nCount value of 'Malicacid': class\n1    59\n2    71\n3    48\nName: Malicacid, dtype: int64\nMax Value of 'Malicacid': class\n1    4.04\n2    5.80\n3    5.65\nName: Malicacid, dtype: float64\nMin Value of 'Malicacid': class\n1    1.35\n2    0.74\n3    1.24\nName: Malicacid, dtype: float64\n=========================================================\nTotal sum of 'ash': class\n1    144.88\n2    159.38\n3    116.98\nName: ash, dtype: float64\nStandard Deviation of 'ash': class\n1    0.227166\n2    0.315467\n3    0.184690\nName: ash, dtype: float64\nCount value of 'ash': class\n1    59\n2    71\n3    48\nName: ash, dtype: int64\nMax Value of 'ash': class\n1    3.22\n2    3.23\n3    2.86\nName: ash, dtype: float64\nMin Value of 'ash': class\n1    2.04\n2    1.36\n3    2.10\nName: ash, dtype: float64\n=========================================================\nTotal sum of 'Alcalinity_ofash': class\n1    1005.2\n2    1436.9\n3    1028.0\nName: Alcalinity_ofash, dtype: float64\nStandard Deviation of 'Alcalinity_ofash': class\n1    2.546322\n2    3.349770\n3    2.258161\nName: Alcalinity_ofash, dtype: float64\nCount value of 'Alcalinity_ofash': class\n1    59\n2    71\n3    48\nName: Alcalinity_ofash, dtype: int64\nMax Value of 'Alcalinity_ofash': class\n1    25.0\n2    30.0\n3    27.0\nName: Alcalinity_ofash, dtype: float64\nMin Value of 'Alcalinity_ofash': class\n1    11.2\n2    10.6\n3    17.5\nName: Alcalinity_ofash, dtype: float64\n=========================================================\nTotal sum of 'Magnesium': class\n1    6274\n2    6713\n3    4767\nName: Magnesium, dtype: int64\nStandard Deviation of 'Magnesium': class\n1    10.498949\n2    16.753497\n3    10.890473\nName: Magnesium, dtype: float64\nCount value of 'Magnesium': class\n1    59\n2    71\n3    48\nName: Magnesium, dtype: int64\nMax Value of 'Magnesium': class\n1    132\n2    162\n3    123\nName: Magnesium, dtype: int64\nMin Value of 'Magnesium': class\n1    89\n2    70\n3    80\nName: Magnesium, dtype: int64\n=========================================================\nTotal sum of 'Totalphenols': class\n1    167.57\n2    160.38\n3     80.58\nName: Totalphenols, dtype: float64\nStandard Deviation of 'Totalphenols': class\n1    0.338961\n2    0.545361\n3    0.356971\nName: Totalphenols, dtype: float64\nCount value of 'Totalphenols': class\n1    59\n2    71\n3    48\nName: Totalphenols, dtype: int64\nMax Value of 'Totalphenols': class\n1    3.88\n2    3.52\n3    2.80\nName: Totalphenols, dtype: float64\nMin Value of 'Totalphenols': class\n1    2.20\n2    1.10\n3    0.98\nName: Totalphenols, dtype: float64\n=========================================================\nTotal sum of 'Flavanoids': class\n1    175.96\n2    147.74\n3     37.51\nName: Flavanoids, dtype: float64\nStandard Deviation of 'Flavanoids': class\n1    0.397494\n2    0.705701\n3    0.293504\nName: Flavanoids, dtype: float64\nCount value of 'Flavanoids': class\n1    59\n2    71\n3    48\nName: Flavanoids, dtype: int64\nMax Value of 'Flavanoids': class\n1    3.93\n2    5.08\n3    1.57\nName: Flavanoids, dtype: float64\nMin Value of 'Flavanoids': class\n1    2.19\n2    0.57\n3    0.34\nName: Flavanoids, dtype: float64\n=========================================================\nTotal sum of 'Nonflavanoidphenols': class\n1    17.11\n2    25.82\n3    21.48\nName: Nonflavanoidphenols, dtype: float64\nStandard Deviation of 'Nonflavanoidphenols': class\n1    0.070049\n2    0.123961\n3    0.124140\nName: Nonflavanoidphenols, dtype: float64\nCount value of 'Nonflavanoidphenols': class\n1    59\n2    71\n3    48\nName: Nonflavanoidphenols, dtype: int64\nMax Value of 'Nonflavanoidphenols': class\n1    0.50\n2    0.66\n3    0.63\nName: Nonflavanoidphenols, dtype: float64\nMin Value of 'Nonflavanoidphenols': class\n1    0.17\n2    0.13\n3    0.17\nName: Nonflavanoidphenols, dtype: float64\n=========================================================\nTotal sum of 'Proanthocyanins': class\n1    112.06\n2    115.75\n3     55.37\nName: Proanthocyanins, dtype: float64\nStandard Deviation of 'Proanthocyanins': class\n1    0.412109\n2    0.602068\n3    0.408836\nName: Proanthocyanins, dtype: float64\nCount value of 'Proanthocyanins': class\n1    59\n2    71\n3    48\nName: Proanthocyanins, dtype: int64\nMax Value of 'Proanthocyanins': class\n1    2.96\n2    3.58\n3    2.70\nName: Proanthocyanins, dtype: float64\nMin Value of 'Proanthocyanins': class\n1    1.25\n2    0.41\n3    0.55\nName: Proanthocyanins, dtype: float64\n=========================================================\nTotal sum of 'Colorintensity': class\n1    326.170000\n2    219.150000\n3    355.019999\nName: Colorintensity, dtype: float64\nStandard Deviation of 'Colorintensity': class\n1    1.238573\n2    0.924929\n3    2.310942\nName: Colorintensity, dtype: float64\nCount value of 'Colorintensity': class\n1    59\n2    71\n3    48\nName: Colorintensity, dtype: int64\nMax Value of 'Colorintensity': class\n1     8.9\n2     6.0\n3    13.0\nName: Colorintensity, dtype: float64\nMin Value of 'Colorintensity': class\n1    3.52\n2    1.28\n3    3.85\nName: Colorintensity, dtype: float64\n=========================================================\nTotal sum of 'Hue': class\n1    62.660\n2    74.996\n3    32.770\nName: Hue, dtype: float64\nStandard Deviation of 'Hue': class\n1    0.116483\n2    0.202937\n3    0.114441\nName: Hue, dtype: float64\nCount value of 'Hue': class\n1    59\n2    71\n3    48\nName: Hue, dtype: int64\nMax Value of 'Hue': class\n1    1.28\n2    1.71\n3    0.96\nName: Hue, dtype: float64\nMin Value of 'Hue': class\n1    0.82\n2    0.69\n3    0.48\nName: Hue, dtype: float64\n=========================================================\nTotal sum of '0D280_0D315_of_diluted_wines': class\n1    186.31\n2    197.76\n3     80.81\nName: 0D280_0D315_of_diluted_wines, dtype: float64\nStandard Deviation of '0D280_0D315_of_diluted_wines': class\n1    0.357077\n2    0.496573\n3    0.272111\nName: 0D280_0D315_of_diluted_wines, dtype: float64\nCount value of '0D280_0D315_of_diluted_wines': class\n1    59\n2    71\n3    48\nName: 0D280_0D315_of_diluted_wines, dtype: int64\nMax Value of '0D280_0D315_of_diluted_wines': class\n1    4.00\n2    3.69\n3    2.47\nName: 0D280_0D315_of_diluted_wines, dtype: float64\nMin Value of '0D280_0D315_of_diluted_wines': class\n1    2.51\n2    1.59\n3    1.27\nName: 0D280_0D315_of_diluted_wines, dtype: float64\n=========================================================\nTotal sum of 'Proline': class\n1    65827\n2    36885\n3    30235\nName: Proline, dtype: int64\nStandard Deviation of 'Proline': class\n1    221.520767\n2    157.211220\n3    115.097043\nName: Proline, dtype: float64\nCount value of 'Proline': class\n1    59\n2    71\n3    48\nName: Proline, dtype: int64\nMax Value of 'Proline': class\n1    1680\n2     985\n3     880\nName: Proline, dtype: int64\nMin Value of 'Proline': class\n1    680\n2    278\n3    415\nName: Proline, dtype: int64\n\n\n\n\n\nHistogram plot for wine data set\n\n\nCode\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport nbformat\n\ndata = pd.read_csv('wine.data', delimiter=',', engine='python' )\ndata.to_excel('wine.xlsx', index=False)\ncolumns = data.columns[data.columns != 'class']    \ngrpdata = data.groupby([\"class\"])\n#numeric_columns = data.select_dtypes(include=['number'])\n#print(numeric_columns)\n\n\ndef histogram_plot(data):\n        # Plot histogram for each numeric column\n            for column in columns:\n                for name, group in grpdata:\n                    plt.figure(figsize=(6,4))\n                    class_name = name if isinstance(name, str) else name[0]\n                    print(\"class\" , class_name)\n                    plt.hist(group[column], bins=80, alpha=0.7, label=column)\n                    plt.xlabel(column)\n                    plt.ylabel('Frequency')\n                    plt.title(f'Histogram of {column}')\n                    plt.show()\n\n# Call the function with the data\nhistogram_plot(data)\n\n\nclass 1\n\n\n\n\n\n\n\n\n\nclass 2\n\n\n\n\n\n\n\n\n\nclass 3\n\n\n\n\n\n\n\n\n\nclass 1\n\n\n\n\n\n\n\n\n\nclass 2\n\n\n\n\n\n\n\n\n\nclass 3\n\n\n\n\n\n\n\n\n\nclass 1\n\n\n\n\n\n\n\n\n\nclass 2\n\n\n\n\n\n\n\n\n\nclass 3\n\n\n\n\n\n\n\n\n\nclass 1\n\n\n\n\n\n\n\n\n\nclass 2\n\n\n\n\n\n\n\n\n\nclass 3\n\n\n\n\n\n\n\n\n\nclass 1\n\n\n\n\n\n\n\n\n\nclass 2\n\n\n\n\n\n\n\n\n\nclass 3\n\n\n\n\n\n\n\n\n\nclass 1\n\n\n\n\n\n\n\n\n\nclass 2\n\n\n\n\n\n\n\n\n\nclass 3\n\n\n\n\n\n\n\n\n\nclass 1\n\n\n\n\n\n\n\n\n\nclass 2\n\n\n\n\n\n\n\n\n\nclass 3\n\n\n\n\n\n\n\n\n\nclass 1\n\n\n\n\n\n\n\n\n\nclass 2\n\n\n\n\n\n\n\n\n\nclass 3\n\n\n\n\n\n\n\n\n\nclass 1\n\n\n\n\n\n\n\n\n\nclass 2\n\n\n\n\n\n\n\n\n\nclass 3\n\n\n\n\n\n\n\n\n\nclass 1\n\n\n\n\n\n\n\n\n\nclass 2\n\n\n\n\n\n\n\n\n\nclass 3\n\n\n\n\n\n\n\n\n\nclass 1\n\n\n\n\n\n\n\n\n\nclass 2\n\n\n\n\n\n\n\n\n\nclass 3\n\n\n\n\n\n\n\n\n\nclass 1\n\n\n\n\n\n\n\n\n\nclass 2\n\n\n\n\n\n\n\n\n\nclass 3\n\n\n\n\n\n\n\n\n\nclass 1\n\n\n\n\n\n\n\n\n\nclass 2\n\n\n\n\n\n\n\n\n\nclass 3\n\n\n\n\n\n\n\n\n\n\n\n\nScatter plot for iris data set\n\n\nCode\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport nbformat\n\n\ndata = pd.read_csv('wine.data', delimiter=',', engine='python' )\ndata.to_excel('wine.xlsx', index=False)\ncolumns = data.columns[data.columns != 'class']    \ngrpdata = data.groupby([\"class\"])\n    #print(data)\n\ndef scatter_plot(data):\n    colors = ['r', 'g', 'b']  # Define more colors if there are more than 2 classes\n\n    for column1 in columns:\n        for column2 in columns:\n            if column1 != column2:\n                plt.figure(figsize=(7,7))  # Create a larger figure for better visualization\n                for name, group in grpdata:\n                    color_map = colors[:len(grpdata)]\n                    plt.scatter(group[column1], group[column2], label=f' \"class\"{name}')\n                plt.title(f\"Scatter Plot of {column1} and {column2}\")\n                plt.xlabel(column1)\n                plt.ylabel(column2)\n                plt.legend()\n                plt.grid(True)\n                plt.show()\n\n\nscatter_plot(data)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLine plot for wine data set\n\n\nCode\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport nbformat\n\n\ndata = pd.read_csv('wine.data', delimiter=',', engine='python' )\ndata.to_excel('wine.xlsx', index=False)\ncolumns = data.columns[data.columns != 'class']    \ngrpdata = data.groupby([\"class\"])\n    #print(data)\n\ndef line_plot(data):\n    # Select only numeric columns\n    #numeric_columns = data.select_dtypes(include=['number']).columns\n    # Plot histogram for each numeric column\n    for name, group in grpdata:\n        class_name = name if isinstance(name, str) else name[0]\n        print(\"class\", class_name)\n        for column in columns:\n                plt.figure(figsize=(6, 4))\n                plt.plot(group.index, group[column], color='green' , label=column, linestyle='-', marker='o')\n                plt.title('Line Plot')\n                plt.xlabel('Index')\n                plt.ylabel(column)\n                plt.legend()\n                plt.grid(True)\n                plt.show()\n\nline_plot(data)\n\n\nclass 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass 2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass 3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBox plot for iris data set\n\n\nCode\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport nbformat\n\n\ndata = pd.read_csv('wine.data', delimiter=',', engine='python' )\ndata.to_excel('wine.xlsx', index=False)\ncolumns = data.columns[data.columns != 'class']    \ngrpdata = data.groupby([\"class\"])\n    #print(data)\n\ndef box_plot(data):\n    for name, group in grpdata:\n        class_name = name if isinstance(name, str) else name[0]\n        print(\"class\" , class_name)\n        for column in columns:\n            plt.figure(figsize=(6, 4))\n            plt.boxplot(group[column])   #, tick_labels=numeric_columns\n            plt.title('Box Plot')\n            plt.xlabel(column)\n            plt.ylabel('Values')\n            plt.grid()\n            plt.show()\n\nbox_plot(data)\n\n\nclass 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass 2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass 3"
  },
  {
    "objectID": "posts/wine data/wine.html#wine-dataset",
    "href": "posts/wine data/wine.html#wine-dataset",
    "title": "Report On Wine Data",
    "section": "",
    "text": "Here the dataset shows the type of class and the quality of wine class :-1,2,3 It represent the Wine Quality Types of Alcohol:-Alcohol: Alcohol content. Malicacid: Malic acid content. ash: Ash content. Alcalinity_ofash: Alcalinity of ash. Magnesium: Magnesium content. Totalphenols: Total phenol content. Flavanoids: Flavanoid content. Nonflavanoidphenols: Non-flavanoid phenol content. Proanthocyanins: Proanthocyanin content. Colorintensity: Color intensity. Hue: Hue. OD280_0D315_of_diluted_wines: OD280/OD315 of diluted wines. Proline: Proline content.\n\n\nCode\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport nbformat\n\n# Read the .dat file\ndata = pd.read_csv('wine.data', delimiter=',')\ndata.to_excel('wine.xlsx', index=False)\nprint(data)\ncolumns = data.columns[data.columns != 'class']    \ngrpdata = data.groupby([\"class\"])\n\n\n     class  Alcohol  Malicacid   ash  Alcalinity_ofash  Magnesium  \\\n0        1    14.23       1.71  2.43              15.6        127   \n1        1    13.20       1.78  2.14              11.2        100   \n2        1    13.16       2.36  2.67              18.6        101   \n3        1    14.37       1.95  2.50              16.8        113   \n4        1    13.24       2.59  2.87              21.0        118   \n..     ...      ...        ...   ...               ...        ...   \n173      3    13.71       5.65  2.45              20.5         95   \n174      3    13.40       3.91  2.48              23.0        102   \n175      3    13.27       4.28  2.26              20.0        120   \n176      3    13.17       2.59  2.37              20.0        120   \n177      3    14.13       4.10  2.74              24.5         96   \n\n     Totalphenols  Flavanoids  Nonflavanoidphenols  Proanthocyanins  \\\n0            2.80        3.06                 0.28             2.29   \n1            2.65        2.76                 0.26             1.28   \n2            2.80        3.24                 0.30             2.81   \n3            3.85        3.49                 0.24             2.18   \n4            2.80        2.69                 0.39             1.82   \n..            ...         ...                  ...              ...   \n173          1.68        0.61                 0.52             1.06   \n174          1.80        0.75                 0.43             1.41   \n175          1.59        0.69                 0.43             1.35   \n176          1.65        0.68                 0.53             1.46   \n177          2.05        0.76                 0.56             1.35   \n\n     Colorintensity   Hue  0D280_0D315_of_diluted_wines  Proline  \n0              5.64  1.04                          3.92     1065  \n1              4.38  1.05                          3.40     1050  \n2              5.68  1.03                          3.17     1185  \n3              7.80  0.86                          3.45     1480  \n4              4.32  1.04                          2.93      735  \n..              ...   ...                           ...      ...  \n173            7.70  0.64                          1.74      740  \n174            7.30  0.70                          1.56      750  \n175           10.20  0.59                          1.56      835  \n176            9.30  0.60                          1.62      840  \n177            9.20  0.61                          1.60      560  \n\n[178 rows x 14 columns]"
  },
  {
    "objectID": "posts/Car Price Prediction/Prediction.html",
    "href": "posts/Car Price Prediction/Prediction.html",
    "title": "Linear Regression - Car Price Prediction And Data Analysis",
    "section": "",
    "text": "Let’s consider a dataset for used cars. As a Data Scientist, you are given the task of creating an automated system that predicts the selling price of cars based on various features, such as horsepower, peak RPM, curb weight, etc.\nBy using this features we can estimate the price for the car Here we can see the dataFrame containing accurate historical data, which includes features . Our task is to use this data that can predict the prices of any cars"
  },
  {
    "objectID": "posts/Car Price Prediction/Prediction.html#know-lets-explore-the-statistics-for-numeric-columns",
    "href": "posts/Car Price Prediction/Prediction.html#know-lets-explore-the-statistics-for-numeric-columns",
    "title": "Linear Regression - Car Price Prediction And Data Analysis",
    "section": "",
    "text": "Code\ndf.describe()\n\n\n\n\n\n\n\n\n\nclass\nnormalized-losses\nwheel-base\nlength\nwidth\nheight\ncurb-weight\nengine-size\nbore\nstroke\ncompression-ratio\nhorsepower\npeak-rpm\ncity-mpg\nhighway-mpg\nprice\n\n\n\n\ncount\n205.000000\n164.000000\n205.000000\n205.000000\n205.000000\n205.000000\n205.000000\n205.000000\n201.000000\n201.000000\n205.000000\n203.000000\n203.000000\n205.000000\n205.000000\n201.000000\n\n\nmean\n0.834146\n122.000000\n98.756585\n174.049268\n65.907805\n53.724878\n2555.565854\n126.907317\n3.329751\n3.255423\n10.142537\n104.256158\n5125.369458\n25.219512\n30.751220\n13207.129353\n\n\nstd\n1.245307\n35.442168\n6.021776\n12.337289\n2.145204\n2.443522\n520.680204\n41.642693\n0.273539\n0.316717\n3.972040\n39.714369\n479.334560\n6.542142\n6.886443\n7947.066342\n\n\nmin\n-2.000000\n65.000000\n86.600000\n141.100000\n60.300000\n47.800000\n1488.000000\n61.000000\n2.540000\n2.070000\n7.000000\n48.000000\n4150.000000\n13.000000\n16.000000\n5118.000000\n\n\n25%\n0.000000\n94.000000\n94.500000\n166.300000\n64.100000\n52.000000\n2145.000000\n97.000000\n3.150000\n3.110000\n8.600000\n70.000000\n4800.000000\n19.000000\n25.000000\n7775.000000\n\n\n50%\n1.000000\n115.000000\n97.000000\n173.200000\n65.500000\n54.100000\n2414.000000\n120.000000\n3.310000\n3.290000\n9.000000\n95.000000\n5200.000000\n24.000000\n30.000000\n10295.000000\n\n\n75%\n2.000000\n150.000000\n102.400000\n183.100000\n66.900000\n55.500000\n2935.000000\n141.000000\n3.590000\n3.410000\n9.400000\n116.000000\n5500.000000\n30.000000\n34.000000\n16500.000000\n\n\nmax\n3.000000\n256.000000\n120.900000\n208.100000\n72.300000\n59.800000\n4066.000000\n326.000000\n3.940000\n4.170000\n23.000000\n288.000000\n6600.000000\n49.000000\n54.000000\n45400.000000"
  },
  {
    "objectID": "posts/Car Price Prediction/Prediction.html#import-libraries",
    "href": "posts/Car Price Prediction/Prediction.html#import-libraries",
    "title": "Linear Regression - Car Price Prediction And Data Analysis",
    "section": "Import Libraries",
    "text": "Import Libraries\n\n\nCode\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error, r2_score ,mean_absolute_error\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\n Here we can see the data below about the car data\n\n\nCode\ndf = pd.read_csv('automobile.data', delimiter=',')\nprint(df.head())\n\n\n   class normalized-losses         make fuel-type aspiration num-of-doors  \\\n0      3                 ?  alfa-romero       gas        std          two   \n1      3                 ?  alfa-romero       gas        std          two   \n2      1                 ?  alfa-romero       gas        std          two   \n3      2               164         audi       gas        std         four   \n4      2               164         audi       gas        std         four   \n\n    body-style drive-wheels engine-location  wheel-base  ...  engine-size  \\\n0  convertible          rwd           front        88.6  ...          130   \n1  convertible          rwd           front        88.6  ...          130   \n2    hatchback          rwd           front        94.5  ...          152   \n3        sedan          fwd           front        99.8  ...          109   \n4        sedan          4wd           front        99.4  ...          136   \n\n   fuel-system  bore  stroke compression-ratio horsepower  peak-rpm city-mpg  \\\n0         mpfi  3.47    2.68               9.0        111      5000       21   \n1         mpfi  3.47    2.68               9.0        111      5000       21   \n2         mpfi  2.68    3.47               9.0        154      5000       19   \n3         mpfi  3.19    3.40              10.0        102      5500       24   \n4         mpfi  3.19    3.40               8.0        115      5500       18   \n\n  highway-mpg  price  \n0          27  13495  \n1          27  16500  \n2          26  16500  \n3          30  13950  \n4          22  17450  \n\n[5 rows x 26 columns]"
  },
  {
    "objectID": "posts/Car Price Prediction/Prediction.html#datacleaning",
    "href": "posts/Car Price Prediction/Prediction.html#datacleaning",
    "title": "Linear Regression - Car Price Prediction And Data Analysis",
    "section": "DataCleaning",
    "text": "DataCleaning\nBefore using the any dataset we need to clean data.\n\n\nHandling the missing values in the dataset\n\n\nReplacing the ‘?’ with the Empty string\n\n\nConvert columns with the data type object (string) to numeric if the column contains numeric values. Otherwise, leave the column as object (string). For example, some columns contain ‘?’. These columns should be converted to numeric after cleaning the data.\n\n\nCode\ndf.replace(\"?\",'', inplace=True)\nprint(df)\nfeature_columns = ['horsepower','bore','stroke','normalized-losses', 'price', 'peak-rpm']\n# Convert selected columns to numeric (if they aren't already)\nfor col in feature_columns:\n        df[col] = pd.to_numeric(df[col], errors='coerce')\ndf = df.assign(price=df['price'].fillna(df['price'].mean()))\ndf = df.assign(horsepower=df['horsepower'].fillna(df['horsepower'].mean()))\ndf = df.assign(bore=df['bore'].fillna(df['bore'].mean()))\n\n\n     class normalized-losses         make fuel-type aspiration num-of-doors  \\\n0        3                    alfa-romero       gas        std          two   \n1        3                    alfa-romero       gas        std          two   \n2        1                    alfa-romero       gas        std          two   \n3        2               164         audi       gas        std         four   \n4        2               164         audi       gas        std         four   \n..     ...               ...          ...       ...        ...          ...   \n200     -1                95        volvo       gas        std         four   \n201     -1                95        volvo       gas      turbo         four   \n202     -1                95        volvo       gas        std         four   \n203     -1                95        volvo    diesel      turbo         four   \n204     -1                95        volvo       gas      turbo         four   \n\n      body-style drive-wheels engine-location  wheel-base  ...  engine-size  \\\n0    convertible          rwd           front        88.6  ...          130   \n1    convertible          rwd           front        88.6  ...          130   \n2      hatchback          rwd           front        94.5  ...          152   \n3          sedan          fwd           front        99.8  ...          109   \n4          sedan          4wd           front        99.4  ...          136   \n..           ...          ...             ...         ...  ...          ...   \n200        sedan          rwd           front       109.1  ...          141   \n201        sedan          rwd           front       109.1  ...          141   \n202        sedan          rwd           front       109.1  ...          173   \n203        sedan          rwd           front       109.1  ...          145   \n204        sedan          rwd           front       109.1  ...          141   \n\n     fuel-system  bore  stroke compression-ratio horsepower  peak-rpm  \\\n0           mpfi  3.47    2.68               9.0        111      5000   \n1           mpfi  3.47    2.68               9.0        111      5000   \n2           mpfi  2.68    3.47               9.0        154      5000   \n3           mpfi  3.19    3.40              10.0        102      5500   \n4           mpfi  3.19    3.40               8.0        115      5500   \n..           ...   ...     ...               ...        ...       ...   \n200         mpfi  3.78    3.15               9.5        114      5400   \n201         mpfi  3.78    3.15               8.7        160      5300   \n202         mpfi  3.58    2.87               8.8        134      5500   \n203          idi  3.01    3.40              23.0        106      4800   \n204         mpfi  3.78    3.15               9.5        114      5400   \n\n    city-mpg highway-mpg  price  \n0         21          27  13495  \n1         21          27  16500  \n2         19          26  16500  \n3         24          30  13950  \n4         18          22  17450  \n..       ...         ...    ...  \n200       23          28  16845  \n201       19          25  19045  \n202       18          23  21485  \n203       26          27  22470  \n204       19          25  22625  \n\n[205 rows x 26 columns]"
  },
  {
    "objectID": "posts/Car Price Prediction/Prediction.html#analysis-of-numerical-features",
    "href": "posts/Car Price Prediction/Prediction.html#analysis-of-numerical-features",
    "title": "Linear Regression - Car Price Prediction And Data Analysis",
    "section": "Analysis of Numerical Features",
    "text": "Analysis of Numerical Features"
  },
  {
    "objectID": "posts/Car Price Prediction/Prediction.html#problem-statement",
    "href": "posts/Car Price Prediction/Prediction.html#problem-statement",
    "title": "Linear Regression - Car Price Prediction And Data Analysis",
    "section": "",
    "text": "Let’s consider a dataset for used cars. As a Data Scientist, you are given the task of creating an automated system that predicts the selling price of cars based on various features, such as horsepower, peak RPM, curb weight, etc.\nBy using this features we can estimate the price for the car Here we can see the dataFrame containing accurate historical data, which includes features . Our task is to use this data that can predict the prices of any cars"
  },
  {
    "objectID": "posts/Car Price Prediction/Prediction.html#data-information",
    "href": "posts/Car Price Prediction/Prediction.html#data-information",
    "title": "Linear Regression - Car Price Prediction And Data Analysis",
    "section": "Data Information",
    "text": "Data Information\nWe could see that class, normalized-losses, wheel-base, length, width, height, curb-weight, engine-size, bore,stroke, compression-ratio, horsepower, peak-rpm, city-mpg, highway-mpg, price are numeric whereas make, fuel-type, aspiration,num-of-doors, body-style, drive-wheels, engine-location, engine-type, num-of-cylinders, fuel-system are objects( string) possibly categorical columns.\n\n\nCode\ndf.info()\n\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 205 entries, 0 to 204\nData columns (total 26 columns):\n #   Column             Non-Null Count  Dtype  \n---  ------             --------------  -----  \n 0   class              205 non-null    int64  \n 1   normalized-losses  164 non-null    float64\n 2   make               205 non-null    object \n 3   fuel-type          205 non-null    object \n 4   aspiration         205 non-null    object \n 5   num-of-doors       205 non-null    object \n 6   body-style         205 non-null    object \n 7   drive-wheels       205 non-null    object \n 8   engine-location    205 non-null    object \n 9   wheel-base         205 non-null    float64\n 10  length             205 non-null    float64\n 11  width              205 non-null    float64\n 12  height             205 non-null    float64\n 13  curb-weight        205 non-null    int64  \n 14  engine-type        205 non-null    object \n 15  num-of-cylinders   205 non-null    object \n 16  engine-size        205 non-null    int64  \n 17  fuel-system        205 non-null    object \n 18  bore               205 non-null    float64\n 19  stroke             201 non-null    float64\n 20  compression-ratio  205 non-null    float64\n 21  horsepower         205 non-null    float64\n 22  peak-rpm           203 non-null    float64\n 23  city-mpg           205 non-null    int64  \n 24  highway-mpg        205 non-null    int64  \n 25  price              205 non-null    float64\ndtypes: float64(11), int64(5), object(10)\nmemory usage: 41.8+ KB\n\n\n\nlet’s explore the Statistics for numeric columns\n\n\nCode\ndf.describe()\n\n\n\n\n\n\n\n\n\nclass\nnormalized-losses\nwheel-base\nlength\nwidth\nheight\ncurb-weight\nengine-size\nbore\nstroke\ncompression-ratio\nhorsepower\npeak-rpm\ncity-mpg\nhighway-mpg\nprice\n\n\n\n\ncount\n205.000000\n164.000000\n205.000000\n205.000000\n205.000000\n205.000000\n205.000000\n205.000000\n205.000000\n201.000000\n205.000000\n205.000000\n203.000000\n205.000000\n205.000000\n205.000000\n\n\nmean\n0.834146\n122.000000\n98.756585\n174.049268\n65.907805\n53.724878\n2555.565854\n126.907317\n3.329751\n3.255423\n10.142537\n104.256158\n5125.369458\n25.219512\n30.751220\n13207.129353\n\n\nstd\n1.245307\n35.442168\n6.021776\n12.337289\n2.145204\n2.443522\n520.680204\n41.642693\n0.270844\n0.316717\n3.972040\n39.519211\n479.334560\n6.542142\n6.886443\n7868.768212\n\n\nmin\n-2.000000\n65.000000\n86.600000\n141.100000\n60.300000\n47.800000\n1488.000000\n61.000000\n2.540000\n2.070000\n7.000000\n48.000000\n4150.000000\n13.000000\n16.000000\n5118.000000\n\n\n25%\n0.000000\n94.000000\n94.500000\n166.300000\n64.100000\n52.000000\n2145.000000\n97.000000\n3.150000\n3.110000\n8.600000\n70.000000\n4800.000000\n19.000000\n25.000000\n7788.000000\n\n\n50%\n1.000000\n115.000000\n97.000000\n173.200000\n65.500000\n54.100000\n2414.000000\n120.000000\n3.310000\n3.290000\n9.000000\n95.000000\n5200.000000\n24.000000\n30.000000\n10595.000000\n\n\n75%\n2.000000\n150.000000\n102.400000\n183.100000\n66.900000\n55.500000\n2935.000000\n141.000000\n3.580000\n3.410000\n9.400000\n116.000000\n5500.000000\n30.000000\n34.000000\n16500.000000\n\n\nmax\n3.000000\n256.000000\n120.900000\n208.100000\n72.300000\n59.800000\n4066.000000\n326.000000\n3.940000\n4.170000\n23.000000\n288.000000\n6600.000000\n49.000000\n54.000000\n45400.000000"
  },
  {
    "objectID": "posts/Car Price Prediction/Prediction.html#correlation",
    "href": "posts/Car Price Prediction/Prediction.html#correlation",
    "title": "Linear Regression - Car Price Prediction And Data Analysis",
    "section": "Correlation",
    "text": "Correlation\nThe relationship between two numerical features such as price and hoursepower etc. can be numerically expressed using a measure called correlation coefficient, which can be computed using the .corr method from the pandas’ library.\n\n\nCode\ncorrelation_coefficient_columns = ['normalized-losses','wheel-base','length','width','height','curb-weight','engine-size','bore','stroke','compression-ratio','horsepower','peak-rpm','city-mpg','highway-mpg']\nfor col in correlation_coefficient_columns:\n    correlation_coefficient = df['price'].corr(df[col])\n    print(f\"Correlation between price and {col}: {correlation_coefficient}\")\n\n\nCorrelation between price and normalized-losses: 0.20325417074184235\nCorrelation between price and wheel-base: 0.5831681499789547\nCorrelation between price and length: 0.6829862954386219\nCorrelation between price and width: 0.728698817593184\nCorrelation between price and height: 0.13438751871051807\nCorrelation between price and curb-weight: 0.820824733354729\nCorrelation between price and engine-size: 0.8617522436859723\nCorrelation between price and bore: 0.5323000195387406\nCorrelation between price and stroke: 0.08213793359382601\nCorrelation between price and compression-ratio: 0.07099036277901553\nCorrelation between price and horsepower: 0.7579169537498175\nCorrelation between price and peak-rpm: -0.10096015614268217\nCorrelation between price and city-mpg: -0.6674492651600004\nCorrelation between price and highway-mpg: -0.6905257341183486\n\n\nWe could observe from the values above, that there’s a high correlation between price and engine-size but less correlation between price and highway-mpg.\nWe can use the .corr() method to show the correlation coefficients between all pairs of numerical columns.\n\n\nCode\ndf.corr(method='pearson',numeric_only=True)\n\n\n\n\n\n\n\n\n\nclass\nnormalized-losses\nwheel-base\nlength\nwidth\nheight\ncurb-weight\nengine-size\nbore\nstroke\ncompression-ratio\nhorsepower\npeak-rpm\ncity-mpg\nhighway-mpg\nprice\n\n\n\n\nclass\n1.000000\n0.528667\n-0.531954\n-0.357612\n-0.232919\n-0.541038\n-0.227691\n-0.105790\n-0.130083\n-0.008965\n-0.178515\n0.071389\n0.274573\n-0.035823\n0.034606\n-0.082201\n\n\nnormalized-losses\n0.528667\n1.000000\n-0.074362\n0.023220\n0.105073\n-0.432335\n0.119893\n0.167365\n-0.033577\n0.065627\n-0.132654\n0.295772\n0.264597\n-0.258502\n-0.210768\n0.203254\n\n\nwheel-base\n-0.531954\n-0.074362\n1.000000\n0.874587\n0.795144\n0.589435\n0.776386\n0.569329\n0.488760\n0.161477\n0.249786\n0.351957\n-0.361052\n-0.470414\n-0.544082\n0.583168\n\n\nlength\n-0.357612\n0.023220\n0.874587\n1.000000\n0.841118\n0.491029\n0.877728\n0.683360\n0.606462\n0.129739\n0.158414\n0.554434\n-0.287325\n-0.670909\n-0.704662\n0.682986\n\n\nwidth\n-0.232919\n0.105073\n0.795144\n0.841118\n1.000000\n0.279210\n0.867032\n0.735433\n0.559152\n0.182956\n0.181129\n0.642195\n-0.219957\n-0.642704\n-0.677218\n0.728699\n\n\nheight\n-0.541038\n-0.432335\n0.589435\n0.491029\n0.279210\n1.000000\n0.295572\n0.067149\n0.171101\n-0.056999\n0.261214\n-0.110137\n-0.322272\n-0.048640\n-0.107358\n0.134388\n\n\ncurb-weight\n-0.227691\n0.119893\n0.776386\n0.877728\n0.867032\n0.295572\n1.000000\n0.850594\n0.648485\n0.168929\n0.151362\n0.750968\n-0.266306\n-0.757414\n-0.797465\n0.820825\n\n\nengine-size\n-0.105790\n0.167365\n0.569329\n0.683360\n0.735433\n0.067149\n0.850594\n1.000000\n0.583798\n0.206675\n0.028971\n0.810713\n-0.244618\n-0.653658\n-0.677470\n0.861752\n\n\nbore\n-0.130083\n-0.033577\n0.488760\n0.606462\n0.559152\n0.171101\n0.648485\n0.583798\n1.000000\n-0.055909\n0.005201\n0.575737\n-0.255053\n-0.584508\n-0.586992\n0.532300\n\n\nstroke\n-0.008965\n0.065627\n0.161477\n0.129739\n0.182956\n-0.056999\n0.168929\n0.206675\n-0.055909\n1.000000\n0.186170\n0.088400\n-0.071493\n-0.042906\n-0.044528\n0.082138\n\n\ncompression-ratio\n-0.178515\n-0.132654\n0.249786\n0.158414\n0.181129\n0.261214\n0.151362\n0.028971\n0.005201\n0.186170\n1.000000\n-0.205740\n-0.436221\n0.324701\n0.265201\n0.070990\n\n\nhorsepower\n0.071389\n0.295772\n0.351957\n0.554434\n0.642195\n-0.110137\n0.750968\n0.810713\n0.575737\n0.088400\n-0.205740\n1.000000\n0.130971\n-0.803162\n-0.770903\n0.757917\n\n\npeak-rpm\n0.274573\n0.264597\n-0.361052\n-0.287325\n-0.219957\n-0.322272\n-0.266306\n-0.244618\n-0.255053\n-0.071493\n-0.436221\n0.130971\n1.000000\n-0.113788\n-0.054257\n-0.100960\n\n\ncity-mpg\n-0.035823\n-0.258502\n-0.470414\n-0.670909\n-0.642704\n-0.048640\n-0.757414\n-0.653658\n-0.584508\n-0.042906\n0.324701\n-0.803162\n-0.113788\n1.000000\n0.971337\n-0.667449\n\n\nhighway-mpg\n0.034606\n-0.210768\n-0.544082\n-0.704662\n-0.677218\n-0.107358\n-0.797465\n-0.677470\n-0.586992\n-0.044528\n0.265201\n-0.770903\n-0.054257\n0.971337\n1.000000\n-0.690526\n\n\nprice\n-0.082201\n0.203254\n0.583168\n0.682986\n0.728699\n0.134388\n0.820825\n0.861752\n0.532300\n0.082138\n0.070990\n0.757917\n-0.100960\n-0.667449\n-0.690526\n1.000000"
  },
  {
    "objectID": "posts/Car Price Prediction/Prediction.html#visualization-of-above-table-using-a-heatmap.",
    "href": "posts/Car Price Prediction/Prediction.html#visualization-of-above-table-using-a-heatmap.",
    "title": "Linear Regression - Car Price Prediction And Data Analysis",
    "section": "Visualization of above table using a heatmap.",
    "text": "Visualization of above table using a heatmap.\n\n\nCode\nplt.figure(figsize=(12, 8))\nsns.heatmap(df.corr(method='pearson',numeric_only=True), cmap='Reds', annot=True)\n#print(data)\nplt.title('Correlation Matrix')\n\n\nText(0.5, 1.0, 'Correlation Matrix')\n\n\n\n\n\n\n\n\n\n In the correlation matrix, we observe that features like horsepower, engine-size, curb-weight, and width have high correlations with the price, close to +1, indicating a strong positive linear relationship. On the other hand, length is highly correlated with wheel-base, suggesting that including both in the model might lead to redundant information.\nIf length and wheel-base provide overlapping information, adding both to the model may not improve its predictive power. Instead, the model might perform better with a combination of features that provide complementary information. For instance, wheel-base and bore might together explain different aspects of price variation that length does not capture.\nTherefore, the features horsepower, engine-size, curb-weight, width, wheel-base, and bore are chosen to build a more effective linear regression model."
  },
  {
    "objectID": "posts/Car Price Prediction/Prediction.html#linear-regression-using-a-single-feature",
    "href": "posts/Car Price Prediction/Prediction.html#linear-regression-using-a-single-feature",
    "title": "Linear Regression - Car Price Prediction And Data Analysis",
    "section": "Linear Regression using a Single Feature",
    "text": "Linear Regression using a Single Feature\n\n\nCode\ndf = df.assign(price=df['price'].fillna(df['price'].mean()))\ndf = df.assign(horsepower=df['horsepower'].fillna(df['horsepower'].mean()))\ndf = df.assign(bore=df['bore'].fillna(df['bore'].mean()))\n\nprint(df)\nX = df[['horsepower', 'engine-size','curb-weight', 'width','wheel-base','bore','length']] # Independent variables\n\ny = df['price']           #Dependent variables\n#print(y)\n\n# Split the data into training and validation sets\nX_train, X_val, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n#print(X_train)\n#print(X_val)\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n# Make predictions on the training set\nX_train_pred = model.predict(X_train)\n\n# Make predictions on the testing set\nX_test_pred = model.predict(X_val)\n\n#print(y_train_pred , y_test_pred)\n\n# Calculate Mean Squared Error\ntrain_mse = mean_squared_error(y_train, X_train_pred)\ntest_mse = mean_squared_error(y_test, X_test_pred)\n\n# Calculate Mean Absolute Error\ntrain_mae = mean_absolute_error(y_train, X_train_pred)\ntest_mae = mean_absolute_error(y_test, X_test_pred)\n\n# Calculate R² Score\ntrain_r2 = r2_score(y_train, X_train_pred)\ntest_r2 = r2_score(y_test, X_test_pred)\n\n\n     class  normalized-losses         make fuel-type aspiration num-of-doors  \\\n0        3                NaN  alfa-romero       gas        std          two   \n1        3                NaN  alfa-romero       gas        std          two   \n2        1                NaN  alfa-romero       gas        std          two   \n3        2              164.0         audi       gas        std         four   \n4        2              164.0         audi       gas        std         four   \n..     ...                ...          ...       ...        ...          ...   \n200     -1               95.0        volvo       gas        std         four   \n201     -1               95.0        volvo       gas      turbo         four   \n202     -1               95.0        volvo       gas        std         four   \n203     -1               95.0        volvo    diesel      turbo         four   \n204     -1               95.0        volvo       gas      turbo         four   \n\n      body-style drive-wheels engine-location  wheel-base  ...  engine-size  \\\n0    convertible          rwd           front        88.6  ...          130   \n1    convertible          rwd           front        88.6  ...          130   \n2      hatchback          rwd           front        94.5  ...          152   \n3          sedan          fwd           front        99.8  ...          109   \n4          sedan          4wd           front        99.4  ...          136   \n..           ...          ...             ...         ...  ...          ...   \n200        sedan          rwd           front       109.1  ...          141   \n201        sedan          rwd           front       109.1  ...          141   \n202        sedan          rwd           front       109.1  ...          173   \n203        sedan          rwd           front       109.1  ...          145   \n204        sedan          rwd           front       109.1  ...          141   \n\n     fuel-system  bore  stroke compression-ratio horsepower  peak-rpm  \\\n0           mpfi  3.47    2.68               9.0      111.0    5000.0   \n1           mpfi  3.47    2.68               9.0      111.0    5000.0   \n2           mpfi  2.68    3.47               9.0      154.0    5000.0   \n3           mpfi  3.19    3.40              10.0      102.0    5500.0   \n4           mpfi  3.19    3.40               8.0      115.0    5500.0   \n..           ...   ...     ...               ...        ...       ...   \n200         mpfi  3.78    3.15               9.5      114.0    5400.0   \n201         mpfi  3.78    3.15               8.7      160.0    5300.0   \n202         mpfi  3.58    2.87               8.8      134.0    5500.0   \n203          idi  3.01    3.40              23.0      106.0    4800.0   \n204         mpfi  3.78    3.15               9.5      114.0    5400.0   \n\n    city-mpg  highway-mpg    price  \n0         21           27  13495.0  \n1         21           27  16500.0  \n2         19           26  16500.0  \n3         24           30  13950.0  \n4         18           22  17450.0  \n..       ...          ...      ...  \n200       23           28  16845.0  \n201       19           25  19045.0  \n202       18           23  21485.0  \n203       26           27  22470.0  \n204       19           25  22625.0  \n\n[205 rows x 26 columns]"
  },
  {
    "objectID": "posts/Car Price Prediction/Prediction.html#evaluation",
    "href": "posts/Car Price Prediction/Prediction.html#evaluation",
    "title": "Linear Regression - Car Price Prediction And Data Analysis",
    "section": "Evaluation",
    "text": "Evaluation\n\n\nCode\nprint(f\"Training MSE: {train_mse}\")\nprint(f\"Testing MSE: {test_mse}\")\nprint(\"===========================================\")\nprint(f\"Training MAE: {train_mae}\")\nprint(f\"Testing MAE: {test_mae}\")\nprint(\"=============================================\")\nprint(f\"Training R²: {train_r2}\")\nprint(f\"Testing R²: {test_r2}\")\n\n\nTraining MSE: 13273431.422094898\nTesting MSE: 15453517.236073863\n===========================================\nTraining MAE: 2417.6617006861425\nTesting MAE: 2773.3099288861613\n=============================================\nTraining R²: 0.7691692520480402\nTesting R²: 0.8018070302642768"
  },
  {
    "objectID": "posts/Car Price Prediction/Prediction.html#ploting",
    "href": "posts/Car Price Prediction/Prediction.html#ploting",
    "title": "Linear Regression - Car Price Prediction And Data Analysis",
    "section": "Ploting",
    "text": "Ploting\n\n\nCode\n# Plotting\n\nplt.figure(figsize=(8,6))\n# Plot training data and regression line\nplt.scatter(X_train_pred,y_train ,color='blue', edgecolor='w', alpha=0.6, label='Predicted Training Data')\nplt.plot([min(y_train), max(y_train)], [min(y_train), max(y_train)], color='red', linestyle='--', label='Perfect Fit Line')\n\n# Add title and labels\nplt.title('Training Data vs. Predictions')\nplt.xlabel('predicted Price')\nplt.ylabel('Acutal Price')\nplt.legend()\nplt.show()\n\nplt.figure(figsize=(8,6))\n# Plot training data and regression line\nplt.scatter(X_test_pred,y_test,color='blue', edgecolor='w', alpha=0.6, label='Predicted Test Data')\nplt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red', linestyle='--', label='Perfect Fit Line')\n# Add title and labels\nplt.title('Test Data vs. Predictions')\nplt.xlabel('Predicted Price')\nplt.ylabel('Acutal Price')\nplt.legend()\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nimport statsmodels.api as sm\nimport numpy as np\n\n# Generate some sample data\nnp.random.seed(0)\nX = df[['horsepower', 'engine-size','curb-weight', 'width','wheel-base','bore','length']] # Independent variables\n\ny = df['price'] \n# Add a constant to the independent variables (for the intercept)\nX = sm.add_constant(X)\n\n# Fit the model\nmodel = sm.OLS(y, X).fit()\n\n# Print the summary\nprint(model.summary())\n\n\n                            OLS Regression Results                            \n==============================================================================\nDep. Variable:                  price   R-squared:                       0.779\nModel:                            OLS   Adj. R-squared:                  0.771\nMethod:                 Least Squares   F-statistic:                     99.18\nDate:                Wed, 28 Aug 2024   Prob (F-statistic):           4.39e-61\nTime:                        20:15:54   Log-Likelihood:                -1974.6\nNo. Observations:                 205   AIC:                             3965.\nDf Residuals:                     197   BIC:                             3992.\nDf Model:                           7                                         \nCovariance Type:            nonrobust                                         \n===============================================================================\n                  coef    std err          t      P&gt;|t|      [0.025      0.975]\n-------------------------------------------------------------------------------\nconst       -2.484e+04   1.45e+04     -1.715      0.088   -5.34e+04    3717.930\nhorsepower     33.0124     14.024      2.354      0.020       5.355      60.670\nengine-size    97.1710     13.980      6.951      0.000      69.601     124.741\ncurb-weight     3.1358      1.712      1.832      0.069      -0.241       6.512\nwidth         179.4978    278.687      0.644      0.520    -370.095     729.091\nwheel-base     86.6198    108.685      0.797      0.426    -127.716     300.956\nbore        -1491.4314   1321.909     -1.128      0.261   -4098.341    1115.478\nlength         -6.6857     59.743     -0.112      0.911    -124.503     111.131\n==============================================================================\nOmnibus:                       32.150   Durbin-Watson:                   1.027\nProb(Omnibus):                  0.000   Jarque-Bera (JB):              125.484\nSkew:                           0.508   Prob(JB):                     5.64e-28\nKurtosis:                       6.696   Cond. No.                     1.44e+05\n==============================================================================\n\nNotes:\n[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n[2] The condition number is large, 1.44e+05. This might indicate that there are\nstrong multicollinearity or other numerical problems."
  },
  {
    "objectID": "posts/wine data/wine.html#about-wine-data",
    "href": "posts/wine data/wine.html#about-wine-data",
    "title": "Report on Wine Data",
    "section": "",
    "text": "The Wine data consists of measurements of various chemical properties of different types of wine. It is organized in a tabular format with multiple columns, each representing a specific property, and rows representing different wine samples."
  },
  {
    "objectID": "posts/wine data/wine.html#data-structure",
    "href": "posts/wine data/wine.html#data-structure",
    "title": "Report on Wine Data",
    "section": "",
    "text": "Columns in wine data:\nclass: Class label (1, 2, or 3) representing different types of wine. Alcohol Malicacid Ash Alcalinity_of_ash Magnesium Total_phenols Flavanoids Nonflavanoid_phenols Proanthocyanins Color_intensity Hue 0D280_0D315_of_diluted_wines Proline"
  },
  {
    "objectID": "posts/wine data/wine.html#descriptive-statistics",
    "href": "posts/wine data/wine.html#descriptive-statistics",
    "title": "Report on Wine Data",
    "section": "",
    "text": "Descriptive Statistics for wine data set\n\n\nCode\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport nbformat\n\n\ndata = pd.read_csv('wine.data', delimiter=',', engine='python' )\ndata.to_excel('wine.xlsx', index=False)\ncolumns = data.columns[data.columns != 'class']    \ngrpdata = data.groupby([\"class\"])\n\ndef statistics(data):\n        #numeric_columns = data.select_dtypes(include=['number']).columns\n        #print(numeric_columns)\n        mean_value = grpdata.mean(numeric_only= True)\n        median_value = grpdata.median(numeric_only= True)\n        mode_value = grpdata.apply(lambda x: x.mode().iloc[0] if not x.mode().empty else None, include_groups=False)\n        #mode_value = grpdata.mode().iloc[0]         \n        # Using f-strings to format the output\n        print(f\"Mean value for each column: \\n{mean_value}\")\n        print(\"==========================================================\")\n        print(f\"Median value for each column: \\n{median_value}\")\n        print('===========================================================')\n        print(f\"Mode value for each column: \\n{mode_value}\")     \n        for column in columns:\n            total_sum = grpdata[column].sum()     \n            std_value = grpdata[column].std()     \n            count_value = grpdata[column].count()\n            max_value = grpdata[column].max()\n            min_value = grpdata[column].min()\n            print(\"=========================================================\")\n            print(f\"Total sum of '{column}': {total_sum}\")\n            print(f\"Standard Deviation of '{column}': {std_value}\")\n            print(f\"Count value of '{column}': {count_value}\")\n            print(f\"Max Value of '{column}': {max_value}\")\n            print(f\"Min Value of '{column}': {min_value}\")\n        return mean_value, median_value, mode_value\n\nmean_value, median_value, mode_value = statistics(data)\n\n\nMean value for each column: \n         Alcohol  Malicacid       ash  Alcalinity_ofash   Magnesium  \\\nclass                                                                 \n1      13.744746   2.010678  2.455593         17.037288  106.338983   \n2      12.278732   1.932676  2.244789         20.238028   94.549296   \n3      13.153750   3.333750  2.437083         21.416667   99.312500   \n\n       Totalphenols  Flavanoids  Nonflavanoidphenols  Proanthocyanins  \\\nclass                                                                   \n1          2.840169    2.982373             0.290000         1.899322   \n2          2.258873    2.080845             0.363662         1.630282   \n3          1.678750    0.781458             0.447500         1.153542   \n\n       Colorintensity       Hue  0D280_0D315_of_diluted_wines      Proline  \nclass                                                                       \n1            5.528305  1.062034                      3.157797  1115.711864  \n2            3.086620  1.056282                      2.785352   519.507042  \n3            7.396250  0.682708                      1.683542   629.895833  \n==========================================================\nMedian value for each column: \n       Alcohol  Malicacid   ash  Alcalinity_ofash  Magnesium  Totalphenols  \\\nclass                                                                        \n1       13.750      1.770  2.44              16.8      104.0         2.800   \n2       12.290      1.610  2.24              20.0       88.0         2.200   \n3       13.165      3.265  2.38              21.0       97.0         1.635   \n\n       Flavanoids  Nonflavanoidphenols  Proanthocyanins  Colorintensity  \\\nclass                                                                     \n1           2.980                 0.29            1.870            5.40   \n2           2.030                 0.37            1.610            2.90   \n3           0.685                 0.47            1.105            7.55   \n\n         Hue  0D280_0D315_of_diluted_wines  Proline  \nclass                                                \n1      1.070                          3.17   1095.0  \n2      1.040                          2.83    495.0  \n3      0.665                          1.66    627.5  \n===========================================================\nMode value for each column: \n0      Alcohol  Malicacid   ash  Alcalinity_ofash  Magnesium  Totalphenols  \\\nclass                                                                        \n1        13.05       1.73  2.36              16.0      101.0          3.00   \n2        12.37       1.51  1.92              18.0       86.0          2.20   \n3        12.25       3.03  2.48              20.0       88.0          1.48   \n\n0      Flavanoids  Nonflavanoidphenols  Proanthocyanins  Colorintensity   Hue  \\\nclass                                                                           \n1            2.68                 0.26             1.66             5.1  1.04   \n2            2.03                 0.37             1.35             2.6  1.23   \n3            0.58                 0.53             0.94             5.0  0.57   \n\n0      0D280_0D315_of_diluted_wines  Proline  \nclass                                         \n1                              3.00   1035.0  \n2                              2.78    450.0  \n3                              1.33    520.0  \n=========================================================\nTotal sum of 'Alcohol': class\n1    810.94\n2    871.79\n3    631.38\nName: Alcohol, dtype: float64\nStandard Deviation of 'Alcohol': class\n1    0.462125\n2    0.537964\n3    0.530241\nName: Alcohol, dtype: float64\nCount value of 'Alcohol': class\n1    59\n2    71\n3    48\nName: Alcohol, dtype: int64\nMax Value of 'Alcohol': class\n1    14.83\n2    13.86\n3    14.34\nName: Alcohol, dtype: float64\nMin Value of 'Alcohol': class\n1    12.85\n2    11.03\n3    12.20\nName: Alcohol, dtype: float64\n=========================================================\nTotal sum of 'Malicacid': class\n1    118.63\n2    137.22\n3    160.02\nName: Malicacid, dtype: float64\nStandard Deviation of 'Malicacid': class\n1    0.688549\n2    1.015569\n3    1.087906\nName: Malicacid, dtype: float64\nCount value of 'Malicacid': class\n1    59\n2    71\n3    48\nName: Malicacid, dtype: int64\nMax Value of 'Malicacid': class\n1    4.04\n2    5.80\n3    5.65\nName: Malicacid, dtype: float64\nMin Value of 'Malicacid': class\n1    1.35\n2    0.74\n3    1.24\nName: Malicacid, dtype: float64\n=========================================================\nTotal sum of 'ash': class\n1    144.88\n2    159.38\n3    116.98\nName: ash, dtype: float64\nStandard Deviation of 'ash': class\n1    0.227166\n2    0.315467\n3    0.184690\nName: ash, dtype: float64\nCount value of 'ash': class\n1    59\n2    71\n3    48\nName: ash, dtype: int64\nMax Value of 'ash': class\n1    3.22\n2    3.23\n3    2.86\nName: ash, dtype: float64\nMin Value of 'ash': class\n1    2.04\n2    1.36\n3    2.10\nName: ash, dtype: float64\n=========================================================\nTotal sum of 'Alcalinity_ofash': class\n1    1005.2\n2    1436.9\n3    1028.0\nName: Alcalinity_ofash, dtype: float64\nStandard Deviation of 'Alcalinity_ofash': class\n1    2.546322\n2    3.349770\n3    2.258161\nName: Alcalinity_ofash, dtype: float64\nCount value of 'Alcalinity_ofash': class\n1    59\n2    71\n3    48\nName: Alcalinity_ofash, dtype: int64\nMax Value of 'Alcalinity_ofash': class\n1    25.0\n2    30.0\n3    27.0\nName: Alcalinity_ofash, dtype: float64\nMin Value of 'Alcalinity_ofash': class\n1    11.2\n2    10.6\n3    17.5\nName: Alcalinity_ofash, dtype: float64\n=========================================================\nTotal sum of 'Magnesium': class\n1    6274\n2    6713\n3    4767\nName: Magnesium, dtype: int64\nStandard Deviation of 'Magnesium': class\n1    10.498949\n2    16.753497\n3    10.890473\nName: Magnesium, dtype: float64\nCount value of 'Magnesium': class\n1    59\n2    71\n3    48\nName: Magnesium, dtype: int64\nMax Value of 'Magnesium': class\n1    132\n2    162\n3    123\nName: Magnesium, dtype: int64\nMin Value of 'Magnesium': class\n1    89\n2    70\n3    80\nName: Magnesium, dtype: int64\n=========================================================\nTotal sum of 'Totalphenols': class\n1    167.57\n2    160.38\n3     80.58\nName: Totalphenols, dtype: float64\nStandard Deviation of 'Totalphenols': class\n1    0.338961\n2    0.545361\n3    0.356971\nName: Totalphenols, dtype: float64\nCount value of 'Totalphenols': class\n1    59\n2    71\n3    48\nName: Totalphenols, dtype: int64\nMax Value of 'Totalphenols': class\n1    3.88\n2    3.52\n3    2.80\nName: Totalphenols, dtype: float64\nMin Value of 'Totalphenols': class\n1    2.20\n2    1.10\n3    0.98\nName: Totalphenols, dtype: float64\n=========================================================\nTotal sum of 'Flavanoids': class\n1    175.96\n2    147.74\n3     37.51\nName: Flavanoids, dtype: float64\nStandard Deviation of 'Flavanoids': class\n1    0.397494\n2    0.705701\n3    0.293504\nName: Flavanoids, dtype: float64\nCount value of 'Flavanoids': class\n1    59\n2    71\n3    48\nName: Flavanoids, dtype: int64\nMax Value of 'Flavanoids': class\n1    3.93\n2    5.08\n3    1.57\nName: Flavanoids, dtype: float64\nMin Value of 'Flavanoids': class\n1    2.19\n2    0.57\n3    0.34\nName: Flavanoids, dtype: float64\n=========================================================\nTotal sum of 'Nonflavanoidphenols': class\n1    17.11\n2    25.82\n3    21.48\nName: Nonflavanoidphenols, dtype: float64\nStandard Deviation of 'Nonflavanoidphenols': class\n1    0.070049\n2    0.123961\n3    0.124140\nName: Nonflavanoidphenols, dtype: float64\nCount value of 'Nonflavanoidphenols': class\n1    59\n2    71\n3    48\nName: Nonflavanoidphenols, dtype: int64\nMax Value of 'Nonflavanoidphenols': class\n1    0.50\n2    0.66\n3    0.63\nName: Nonflavanoidphenols, dtype: float64\nMin Value of 'Nonflavanoidphenols': class\n1    0.17\n2    0.13\n3    0.17\nName: Nonflavanoidphenols, dtype: float64\n=========================================================\nTotal sum of 'Proanthocyanins': class\n1    112.06\n2    115.75\n3     55.37\nName: Proanthocyanins, dtype: float64\nStandard Deviation of 'Proanthocyanins': class\n1    0.412109\n2    0.602068\n3    0.408836\nName: Proanthocyanins, dtype: float64\nCount value of 'Proanthocyanins': class\n1    59\n2    71\n3    48\nName: Proanthocyanins, dtype: int64\nMax Value of 'Proanthocyanins': class\n1    2.96\n2    3.58\n3    2.70\nName: Proanthocyanins, dtype: float64\nMin Value of 'Proanthocyanins': class\n1    1.25\n2    0.41\n3    0.55\nName: Proanthocyanins, dtype: float64\n=========================================================\nTotal sum of 'Colorintensity': class\n1    326.170000\n2    219.150000\n3    355.019999\nName: Colorintensity, dtype: float64\nStandard Deviation of 'Colorintensity': class\n1    1.238573\n2    0.924929\n3    2.310942\nName: Colorintensity, dtype: float64\nCount value of 'Colorintensity': class\n1    59\n2    71\n3    48\nName: Colorintensity, dtype: int64\nMax Value of 'Colorintensity': class\n1     8.9\n2     6.0\n3    13.0\nName: Colorintensity, dtype: float64\nMin Value of 'Colorintensity': class\n1    3.52\n2    1.28\n3    3.85\nName: Colorintensity, dtype: float64\n=========================================================\nTotal sum of 'Hue': class\n1    62.660\n2    74.996\n3    32.770\nName: Hue, dtype: float64\nStandard Deviation of 'Hue': class\n1    0.116483\n2    0.202937\n3    0.114441\nName: Hue, dtype: float64\nCount value of 'Hue': class\n1    59\n2    71\n3    48\nName: Hue, dtype: int64\nMax Value of 'Hue': class\n1    1.28\n2    1.71\n3    0.96\nName: Hue, dtype: float64\nMin Value of 'Hue': class\n1    0.82\n2    0.69\n3    0.48\nName: Hue, dtype: float64\n=========================================================\nTotal sum of '0D280_0D315_of_diluted_wines': class\n1    186.31\n2    197.76\n3     80.81\nName: 0D280_0D315_of_diluted_wines, dtype: float64\nStandard Deviation of '0D280_0D315_of_diluted_wines': class\n1    0.357077\n2    0.496573\n3    0.272111\nName: 0D280_0D315_of_diluted_wines, dtype: float64\nCount value of '0D280_0D315_of_diluted_wines': class\n1    59\n2    71\n3    48\nName: 0D280_0D315_of_diluted_wines, dtype: int64\nMax Value of '0D280_0D315_of_diluted_wines': class\n1    4.00\n2    3.69\n3    2.47\nName: 0D280_0D315_of_diluted_wines, dtype: float64\nMin Value of '0D280_0D315_of_diluted_wines': class\n1    2.51\n2    1.59\n3    1.27\nName: 0D280_0D315_of_diluted_wines, dtype: float64\n=========================================================\nTotal sum of 'Proline': class\n1    65827\n2    36885\n3    30235\nName: Proline, dtype: int64\nStandard Deviation of 'Proline': class\n1    221.520767\n2    157.211220\n3    115.097043\nName: Proline, dtype: float64\nCount value of 'Proline': class\n1    59\n2    71\n3    48\nName: Proline, dtype: int64\nMax Value of 'Proline': class\n1    1680\n2     985\n3     880\nName: Proline, dtype: int64\nMin Value of 'Proline': class\n1    680\n2    278\n3    415\nName: Proline, dtype: int64"
  },
  {
    "objectID": "posts/wine data/wine.html#histogram-plot",
    "href": "posts/wine data/wine.html#histogram-plot",
    "title": "Report on Wine Data",
    "section": "",
    "text": "Histogram plot for wine data set\n\n\nCode\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport nbformat\n\ndata = pd.read_csv('wine.data', delimiter=',', engine='python' )\ndata.to_excel('wine.xlsx', index=False)\ncolumns = data.columns[data.columns != 'class']    \ngrpdata = data.groupby([\"class\"])\n#numeric_columns = data.select_dtypes(include=['number'])\n#print(numeric_columns)\n\n\ndef histogram_plot(data):\n        # Plot histogram for each numeric column\n            for column in columns:\n                for name, group in grpdata:\n                    plt.figure(figsize=(6,4))\n                    class_name = name if isinstance(name, str) else name[0]\n                    print(\"class\" , class_name)\n                    plt.hist(group[column], bins=80, alpha=0.7, label=column)\n                    plt.xlabel(column)\n                    plt.ylabel('Frequency')\n                    plt.title(f'Histogram of {column}')\n                    plt.show()\n\n# Call the function with the data\nhistogram_plot(data)\n\n\nclass 1\n\n\n\n\n\n\n\n\n\nclass 2\n\n\n\n\n\n\n\n\n\nclass 3\n\n\n\n\n\n\n\n\n\nclass 1\n\n\n\n\n\n\n\n\n\nclass 2\n\n\n\n\n\n\n\n\n\nclass 3\n\n\n\n\n\n\n\n\n\nclass 1\n\n\n\n\n\n\n\n\n\nclass 2\n\n\n\n\n\n\n\n\n\nclass 3\n\n\n\n\n\n\n\n\n\nclass 1\n\n\n\n\n\n\n\n\n\nclass 2\n\n\n\n\n\n\n\n\n\nclass 3\n\n\n\n\n\n\n\n\n\nclass 1\n\n\n\n\n\n\n\n\n\nclass 2\n\n\n\n\n\n\n\n\n\nclass 3\n\n\n\n\n\n\n\n\n\nclass 1\n\n\n\n\n\n\n\n\n\nclass 2\n\n\n\n\n\n\n\n\n\nclass 3\n\n\n\n\n\n\n\n\n\nclass 1\n\n\n\n\n\n\n\n\n\nclass 2\n\n\n\n\n\n\n\n\n\nclass 3\n\n\n\n\n\n\n\n\n\nclass 1\n\n\n\n\n\n\n\n\n\nclass 2\n\n\n\n\n\n\n\n\n\nclass 3\n\n\n\n\n\n\n\n\n\nclass 1\n\n\n\n\n\n\n\n\n\nclass 2\n\n\n\n\n\n\n\n\n\nclass 3\n\n\n\n\n\n\n\n\n\nclass 1\n\n\n\n\n\n\n\n\n\nclass 2\n\n\n\n\n\n\n\n\n\nclass 3\n\n\n\n\n\n\n\n\n\nclass 1\n\n\n\n\n\n\n\n\n\nclass 2\n\n\n\n\n\n\n\n\n\nclass 3\n\n\n\n\n\n\n\n\n\nclass 1\n\n\n\n\n\n\n\n\n\nclass 2\n\n\n\n\n\n\n\n\n\nclass 3\n\n\n\n\n\n\n\n\n\nclass 1\n\n\n\n\n\n\n\n\n\nclass 2\n\n\n\n\n\n\n\n\n\nclass 3"
  },
  {
    "objectID": "posts/wine data/wine.html#scatter-plot",
    "href": "posts/wine data/wine.html#scatter-plot",
    "title": "Report on Wine Data",
    "section": "",
    "text": "Scatter plot for iris data set\n\n\nCode\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport nbformat\n\n\ndata = pd.read_csv('wine.data', delimiter=',', engine='python' )\ndata.to_excel('wine.xlsx', index=False)\ncolumns = data.columns[data.columns != 'class']    \ngrpdata = data.groupby([\"class\"])\n    #print(data)\n\ndef scatter_plot(data):\n    colors = ['r', 'g', 'b']  # Define more colors if there are more than 2 classes\n\n    for column1 in columns:\n        for column2 in columns:\n            if column1 != column2:\n                plt.figure(figsize=(7,7))  # Create a larger figure for better visualization\n                for name, group in grpdata:\n                    color_map = colors[:len(grpdata)]\n                    plt.scatter(group[column1], group[column2], label=f' \"class\"{name}')\n                plt.title(f\"Scatter Plot of {column1} and {column2}\")\n                plt.xlabel(column1)\n                plt.ylabel(column2)\n                plt.legend()\n                plt.grid(True)\n                plt.show()\n\n\nscatter_plot(data)"
  },
  {
    "objectID": "posts/wine data/wine.html#line-plot",
    "href": "posts/wine data/wine.html#line-plot",
    "title": "Report on Wine Data",
    "section": "",
    "text": "Line plot for wine data set\n\n\nCode\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport nbformat\n\n\ndata = pd.read_csv('wine.data', delimiter=',', engine='python' )\ndata.to_excel('wine.xlsx', index=False)\ncolumns = data.columns[data.columns != 'class']    \ngrpdata = data.groupby([\"class\"])\n    #print(data)\n\ndef line_plot(data):\n    # Select only numeric columns\n    #numeric_columns = data.select_dtypes(include=['number']).columns\n    # Plot histogram for each numeric column\n    for name, group in grpdata:\n        class_name = name if isinstance(name, str) else name[0]\n        print(\"class\", class_name)\n        for column in columns:\n                plt.figure(figsize=(6, 4))\n                plt.plot(group.index, group[column], color='green' , label=column, linestyle='-', marker='o')\n                plt.title('Line Plot')\n                plt.xlabel('Index')\n                plt.ylabel(column)\n                plt.legend()\n                plt.grid(True)\n                plt.show()\n\nline_plot(data)\n\n\nclass 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass 2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass 3"
  },
  {
    "objectID": "posts/wine data/wine.html#box-plot",
    "href": "posts/wine data/wine.html#box-plot",
    "title": "Report on Wine Data",
    "section": "",
    "text": "Box plot for iris data set\n\n\nCode\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport nbformat\n\n\ndata = pd.read_csv('wine.data', delimiter=',', engine='python' )\ndata.to_excel('wine.xlsx', index=False)\ncolumns = data.columns[data.columns != 'class']    \ngrpdata = data.groupby([\"class\"])\n    #print(data)\n\ndef box_plot(data):\n    for name, group in grpdata:\n        class_name = name if isinstance(name, str) else name[0]\n        print(\"class\" , class_name)\n        for column in columns:\n            plt.figure(figsize=(6, 4))\n            plt.boxplot(group[column])   #, tick_labels=numeric_columns\n            plt.title('Box Plot')\n            plt.xlabel(column)\n            plt.ylabel('Values')\n            plt.grid()\n            plt.show()\n\nbox_plot(data)\n\n\nclass 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass 2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass 3"
  },
  {
    "objectID": "QuartoBlog/index.html",
    "href": "QuartoBlog/index.html",
    "title": "Data Sciencist",
    "section": "",
    "text": "Report On Wine Data\n\n\n\n\n\n\n\n\n\n\n\nJul 26, 2024\n\n\nPreethi Ganta\n\n\n\n\n\n\n\n\n\n\n\n\nReport On Iris Data\n\n\n\n\n\n\ncode\n\n\nAnalysis\n\n\n\n\n\n\n\n\n\nJul 19, 2024\n\n\nPreethi Ganta\n\n\n\n\n\n\n\n\n\n\n\n\nGanta Preethi\n\n\n\n\n\n\n\n\n\n\n\nJun 28, 2024\n\n\nGanta Preethi\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nJun 27, 2024\n\n\nPreethi Ganta\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "QuartoBlog/posts/welcome/index.html",
    "href": "QuartoBlog/posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "About Me"
  },
  {
    "objectID": "QuartoBlog/posts/wine data/wine.html",
    "href": "QuartoBlog/posts/wine data/wine.html",
    "title": "Report On Wine Data",
    "section": "",
    "text": "Here the dataset shows the type of class and the quality of wine class :-1,2,3 It represent the Wine Quality Types of Alcohol:-Alcohol: Alcohol content. Malicacid: Malic acid content. ash: Ash content. Alcalinity_ofash: Alcalinity of ash. Magnesium: Magnesium content. Totalphenols: Total phenol content. Flavanoids: Flavanoid content. Nonflavanoidphenols: Non-flavanoid phenol content. Proanthocyanins: Proanthocyanin content. Colorintensity: Color intensity. Hue: Hue. OD280_0D315_of_diluted_wines: OD280/OD315 of diluted wines. Proline: Proline content.\n\n\nCode\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport nbformat\n\n# Read the .dat file\ndata = pd.read_csv('wine.data', delimiter=',')\ndata.to_excel('wine.xlsx', index=False)\nprint(data)\ncolumns = data.columns[data.columns != 'class']    \ngrpdata = data.groupby([\"class\"])\n\n\n     class  Alcohol  Malicacid   ash  Alcalinity_ofash  Magnesium  \\\n0        1    14.23       1.71  2.43              15.6        127   \n1        1    13.20       1.78  2.14              11.2        100   \n2        1    13.16       2.36  2.67              18.6        101   \n3        1    14.37       1.95  2.50              16.8        113   \n4        1    13.24       2.59  2.87              21.0        118   \n..     ...      ...        ...   ...               ...        ...   \n173      3    13.71       5.65  2.45              20.5         95   \n174      3    13.40       3.91  2.48              23.0        102   \n175      3    13.27       4.28  2.26              20.0        120   \n176      3    13.17       2.59  2.37              20.0        120   \n177      3    14.13       4.10  2.74              24.5         96   \n\n     Totalphenols  Flavanoids  Nonflavanoidphenols  Proanthocyanins  \\\n0            2.80        3.06                 0.28             2.29   \n1            2.65        2.76                 0.26             1.28   \n2            2.80        3.24                 0.30             2.81   \n3            3.85        3.49                 0.24             2.18   \n4            2.80        2.69                 0.39             1.82   \n..            ...         ...                  ...              ...   \n173          1.68        0.61                 0.52             1.06   \n174          1.80        0.75                 0.43             1.41   \n175          1.59        0.69                 0.43             1.35   \n176          1.65        0.68                 0.53             1.46   \n177          2.05        0.76                 0.56             1.35   \n\n     Colorintensity   Hue  0D280_0D315_of_diluted_wines  Proline  \n0              5.64  1.04                          3.92     1065  \n1              4.38  1.05                          3.40     1050  \n2              5.68  1.03                          3.17     1185  \n3              7.80  0.86                          3.45     1480  \n4              4.32  1.04                          2.93      735  \n..              ...   ...                           ...      ...  \n173            7.70  0.64                          1.74      740  \n174            7.30  0.70                          1.56      750  \n175           10.20  0.59                          1.56      835  \n176            9.30  0.60                          1.62      840  \n177            9.20  0.61                          1.60      560  \n\n[178 rows x 14 columns]"
  },
  {
    "objectID": "QuartoBlog/posts/wine data/wine.html#wine-dataset",
    "href": "QuartoBlog/posts/wine data/wine.html#wine-dataset",
    "title": "Report On Wine Data",
    "section": "",
    "text": "Here the dataset shows the type of class and the quality of wine class :-1,2,3 It represent the Wine Quality Types of Alcohol:-Alcohol: Alcohol content. Malicacid: Malic acid content. ash: Ash content. Alcalinity_ofash: Alcalinity of ash. Magnesium: Magnesium content. Totalphenols: Total phenol content. Flavanoids: Flavanoid content. Nonflavanoidphenols: Non-flavanoid phenol content. Proanthocyanins: Proanthocyanin content. Colorintensity: Color intensity. Hue: Hue. OD280_0D315_of_diluted_wines: OD280/OD315 of diluted wines. Proline: Proline content.\n\n\nCode\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport nbformat\n\n# Read the .dat file\ndata = pd.read_csv('wine.data', delimiter=',')\ndata.to_excel('wine.xlsx', index=False)\nprint(data)\ncolumns = data.columns[data.columns != 'class']    \ngrpdata = data.groupby([\"class\"])\n\n\n     class  Alcohol  Malicacid   ash  Alcalinity_ofash  Magnesium  \\\n0        1    14.23       1.71  2.43              15.6        127   \n1        1    13.20       1.78  2.14              11.2        100   \n2        1    13.16       2.36  2.67              18.6        101   \n3        1    14.37       1.95  2.50              16.8        113   \n4        1    13.24       2.59  2.87              21.0        118   \n..     ...      ...        ...   ...               ...        ...   \n173      3    13.71       5.65  2.45              20.5         95   \n174      3    13.40       3.91  2.48              23.0        102   \n175      3    13.27       4.28  2.26              20.0        120   \n176      3    13.17       2.59  2.37              20.0        120   \n177      3    14.13       4.10  2.74              24.5         96   \n\n     Totalphenols  Flavanoids  Nonflavanoidphenols  Proanthocyanins  \\\n0            2.80        3.06                 0.28             2.29   \n1            2.65        2.76                 0.26             1.28   \n2            2.80        3.24                 0.30             2.81   \n3            3.85        3.49                 0.24             2.18   \n4            2.80        2.69                 0.39             1.82   \n..            ...         ...                  ...              ...   \n173          1.68        0.61                 0.52             1.06   \n174          1.80        0.75                 0.43             1.41   \n175          1.59        0.69                 0.43             1.35   \n176          1.65        0.68                 0.53             1.46   \n177          2.05        0.76                 0.56             1.35   \n\n     Colorintensity   Hue  0D280_0D315_of_diluted_wines  Proline  \n0              5.64  1.04                          3.92     1065  \n1              4.38  1.05                          3.40     1050  \n2              5.68  1.03                          3.17     1185  \n3              7.80  0.86                          3.45     1480  \n4              4.32  1.04                          2.93      735  \n..              ...   ...                           ...      ...  \n173            7.70  0.64                          1.74      740  \n174            7.30  0.70                          1.56      750  \n175           10.20  0.59                          1.56      835  \n176            9.30  0.60                          1.62      840  \n177            9.20  0.61                          1.60      560  \n\n[178 rows x 14 columns]"
  },
  {
    "objectID": "QuartoBlog/posts/Iris Data/Report.html",
    "href": "QuartoBlog/posts/Iris Data/Report.html",
    "title": "Report On Iris Data",
    "section": "",
    "text": "The above image shows the three species of iris there iris_setosa,iris_versicolor and iris_virginica\n\n\nHere, Dataset shows the class and features Class:-iris_setosa,iris_versicolor,iris_verginica Features:-Sepal_length,Sepal_width,petal_length,petal_width\n\n\nCode\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport nbformat\n\n# Read the .dat file\ndata = pd.read_csv('iris.data', delimiter=',')\ndata.to_excel('iris.xlsx', index=False)\nprint(data)\nnum_df = data.select_dtypes(include = 'number')\n\n\n     sepal length  sepal width  petal length  petal width           class\n0             5.1          3.5           1.4          0.2     Iris-setosa\n1             4.9          3.0           1.4          0.2     Iris-setosa\n2             4.7          3.2           1.3          0.2     Iris-setosa\n3             4.6          3.1           1.5          0.2     Iris-setosa\n4             5.0          3.6           1.4          0.2     Iris-setosa\n..            ...          ...           ...          ...             ...\n145           6.7          3.0           5.2          2.3  Iris-virginica\n146           6.3          2.5           5.0          1.9  Iris-virginica\n147           6.5          3.0           5.2          2.0  Iris-virginica\n148           6.2          3.4           5.4          2.3  Iris-virginica\n149           5.9          3.0           5.1          1.8  Iris-virginica\n\n[150 rows x 5 columns]"
  },
  {
    "objectID": "QuartoBlog/posts/Iris Data/Report.html#iris-dataset",
    "href": "QuartoBlog/posts/Iris Data/Report.html#iris-dataset",
    "title": "Report On Iris Data",
    "section": "",
    "text": "Here, Dataset shows the class and features Class:-iris_setosa,iris_versicolor,iris_verginica Features:-Sepal_length,Sepal_width,petal_length,petal_width\n\n\nCode\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport nbformat\n\n# Read the .dat file\ndata = pd.read_csv('iris.data', delimiter=',')\ndata.to_excel('iris.xlsx', index=False)\nprint(data)\nnum_df = data.select_dtypes(include = 'number')\n\n\n     sepal length  sepal width  petal length  petal width           class\n0             5.1          3.5           1.4          0.2     Iris-setosa\n1             4.9          3.0           1.4          0.2     Iris-setosa\n2             4.7          3.2           1.3          0.2     Iris-setosa\n3             4.6          3.1           1.5          0.2     Iris-setosa\n4             5.0          3.6           1.4          0.2     Iris-setosa\n..            ...          ...           ...          ...             ...\n145           6.7          3.0           5.2          2.3  Iris-virginica\n146           6.3          2.5           5.0          1.9  Iris-virginica\n147           6.5          3.0           5.2          2.0  Iris-virginica\n148           6.2          3.4           5.4          2.3  Iris-virginica\n149           5.9          3.0           5.1          1.8  Iris-virginica\n\n[150 rows x 5 columns]"
  },
  {
    "objectID": "QuartoBlog/posts/Iris Data/Report.html#plot-for-sepal-length",
    "href": "QuartoBlog/posts/Iris Data/Report.html#plot-for-sepal-length",
    "title": "Report On Iris Data",
    "section": "Plot for Sepal Length",
    "text": "Plot for Sepal Length\n\n\nCode\n# Set up the FacetGrid for Sepal Length\ng = sns.FacetGrid(data, col=\"class\", margin_titles=True, col_wrap=3)\ng.map(plt.hist, \"sepal length\", bins=10, color=\"steelblue\", edgecolor=\"black\")\ng.fig.suptitle(\"Histogram of Sepal Length by Species\", y=1.05)\nplt.show()\n\n\n\n\n\n\n\n\n\nThe above plot shows the distribution of sepal lengths for each species of the Iris flower (setosa, versicolor, and virginica). Each subplot represents a different species, allowing for an easy comparison of sepal length distributions between the species. Iris-setosa:-The sepal lengths are mostly concentrated between 4.5 and 5.5 cm. The distribution appears to be more tightly clustered compared to the other species. Iris-versicolor:-The sepal lengths are more spread out, typically ranging from 5.0 to 7.0 cm, with a peak around 5.5 to 6.0 cm. Iris-virginica:- The sepal lengths show a broader distribution, generally ranging from 6.0 to 7.5 cm. This species has the longest sepals on average.\n\nPlot for Sepal Width\n\n\nCode\n# Set up the FacetGrid for Sepal Width\ng = sns.FacetGrid(data, col=\"class\", margin_titles=True, col_wrap=3)\ng.map(plt.hist, \"sepal width\", bins=10, color=\"steelblue\", edgecolor=\"black\")\ng.fig.suptitle(\"Histogram of Sepal Width by Species\", y=1.05)\nplt.show()\n\n\n\n\n\n\n\n\n\nThe above plot shows the distribution of sepal width for each iris class. Each subplot represents a different species, allowing comparison of sepal width distribution. Iris-setosa:-The sepal width are mostly between 3.0 and 4.0 cm. This iris_setosa tends to have wider sepals compared to the other two. Iris-versicolor:-The sepal width are distributed between 2.5 and 3.5 cm, with a peak around 2.8 to 3.0 cm. Iris-virginica:-The sepal widths range from 2.5 to 3.5 cm, with a slight peak around 3.0 cm, similar to Iris-versicolor.\n\n\nPlot for Petal Length\n\n\nCode\n# Set up the FacetGrid for Petal Length\ng = sns.FacetGrid(data, col=\"class\", margin_titles=True, col_wrap=3)\ng.map(plt.hist, \"petal length\", bins=10, color=\"steelblue\", edgecolor=\"black\")\ng.fig.suptitle(\"Histogram of Petal Length by Species\", y=1.05)\nplt.show()\n\n\n\n\n\n\n\n\n\nThe above plot shows the distribution of petal lengths for each species of the Iris flower.\nIris-setosa:- The petal lengths are mostly concentrated between 1.0 and 1.5 cm, indicating shorter petals for this species. Iris-versicolor:- The petal lengths are more spread out, typically ranging from 3.0 to 5.0 cm, with a peak around 4.0 to 4.5 cm. Iris-virginica:- The petal lengths show a broader distribution, generally ranging from 4.5 to 6.5 cm. This species has the longest petals on average.\n\n\nPlot for Petal width\n\n\nCode\n# Set up the FacetGrid for Petal Width\ng = sns.FacetGrid(data, col=\"class\", margin_titles=True, col_wrap=3)\ng.map(plt.hist, \"petal width\", bins=10, color=\"steelblue\", edgecolor=\"black\")\ng.fig.suptitle(\"Histogram of Petal Width by Species\", y=1.05)\nplt.show()\n\n\n\n\n\n\n\n\n\nThe above plot shows the distribution of petal widths for each species of the Iris flower.\nIris-setosa:- The petal widths are mostly concentrated between 0.1 and 0.3 cm, indicating narrower petals for this species. Iris-versicolor:- The petal widths are more spread out, typically ranging from 1.0 to 1.5 cm, with a peak around 1.3 cm. Iris-virginica:- The petal widths show a broader distribution, generally ranging from 1.5 to 2.5 cm. This species has the widest petals on average"
  },
  {
    "objectID": "QuartoBlog/posts/Iris Data/Report.html#box-plot",
    "href": "QuartoBlog/posts/Iris Data/Report.html#box-plot",
    "title": "Report On Iris Data",
    "section": "Box Plot",
    "text": "Box Plot\n\n\nCode\n# Box plot\nsns.boxplot(data, x=\"class\", y=\"sepal width\",hue='class', palette=\"Set3\")\nplt.title(\"Box Plot of Sepal Width by Species\")\nplt.show()\n\n\n\n\n\n\n\n\n\nThe box plot provides a clear visual comparison of the sepal widths across the three Iris species: Iris-setosa has the widest range of sepal widths, with the highest median value and the greatest variability. Iris-versicolor has a narrower range of sepal widths with a lower median compared to Iris-setosa. Iris-virginica has a sepal width distribution similar to Iris-versicolor, with moderate variability and a comparable median value.\n\n\nCode\n# Box plot\nsns.boxplot(data, x=\"class\", y=\"sepal length\",hue='class', palette=\"Set3\")\nplt.title(\"Box Plot of Sepal length by Species\")\nplt.show()\n\n\n\n\n\n\n\n\n\nA box plot is a standardized way of displaying the distribution of data based on a five-number summary: minimum, first quartile (Q1), median, third quartile (Q3), and maximum. It also highlights outliers, if any. Box Plot Interpretation Iris-setosa:- Median (Q2): The central line inside the box represents the median sepal length. Interquartile Range (IQR): The box represents the range between the first quartile (Q1) and the third quartile (Q3). Whiskers: The lines extending from the box show the range of the data within 1.5 times the IQR from Q1 and Q3. Data points outside this range are considered outliers. Outliers: Points outside the whiskers, if any, represent outliers in the sepal length distribution. Iris-versicolor:- The median sepal length is higher than that of Iris-setosa. The IQR is larger, indicating more variability in sepal lengths. The whiskers and potential outliers provide insight into the spread and extremes of the data. Iris-virginica:- The median sepal length is the highest among the three species. The IQR is comparable to Iris-versicolor but larger than Iris-setosa, indicating substantial variability. The whiskers and any outliers show the spread and extremities of the sepal length for this species. The box plot provides a clear visual comparison of the sepal lengths across the three Iris species: Iris-setosa has the shortest sepal lengths, with minimal variability. Iris-versicolor has moderate sepal lengths with greater variability compared to Iris-setosa. Iris-virginica has the longest sepal lengths with significant variability. This visualization is useful for understanding the distribution and spread of sepal lengths within and across the species, highlighting the central tendency and variability, as well as any potential outliers in the data.\n\n\nCode\n# Box plot\nsns.boxplot(data, x=\"class\", y=\"petal width\",hue='class', palette=\"Set3\")\nplt.title(\"Box Plot of petal Width by Species\")\nplt.show()\n\n\n\n\n\n\n\n\n\nThe box plot provides a clear visual comparison of the petal widths across the three Iris species: Iris-setosa has the narrowest range of petal widths, with the lowest median value and the least variability. Iris-versicolor has a wider range of petal widths with a higher median compared to Iris-setosa. Iris-virginica has the widest range and the highest median value of petal widths, indicating significant variability within the species.\n\n\nCode\n# Box plot\nsns.boxplot(data, x=\"class\", y=\"petal length\",hue='class', palette=\"Set3\")\nplt.title(\"Box Plot of petal length by Species\")\nplt.show()\n\n\n\n\n\n\n\n\n\nThe box plot provides a clear visual comparison of the petal lengths across the three Iris species: Iris-setosa has the narrowest range of petal lengths, with the lowest median value and the least variability. Iris-versicolor has a wider range of petal lengths with a higher median compared to Iris-setosa. Iris-virginica has the widest range and the highest median value of petal lengths, indicating significant variability within the species. This visualization is useful for understanding the distribution and spread of petal lengths within and across the species, highlighting the central tendency and variability, as well as any potential outliers in the data.\n\n\nCode\n# Compute the correlation matrix\ncorrelation_matrix = num_df.corr()\n\n# Create a heatmap\nplt.figure(figsize=(8, 6))\nsns.heatmap(correlation_matrix, annot=True, cmap=\"coolwarm\", vmin=-1, vmax=1)\nplt.title(\"Correlation Matrix of Iris Dataset\")\nplt.show()\n\nsns.pairplot(data, hue=\"class\", palette=\"Set2\", markers=[\"o\", \"s\", \"D\"])\n\n# Set the title for the entire plot\nplt.suptitle(\"Scatter Plot Matrix of Iris Dataset\", y=1.02)\nplt.show()"
  },
  {
    "objectID": "QuartoBlog/posts/cv/Cv.html",
    "href": "QuartoBlog/posts/cv/Cv.html",
    "title": "Ganta Preethi",
    "section": "",
    "text": "Experienced and dedicated Data Analyst with several years of experience identifying efficiencies and problem areas within data streams while communicating needs for projects. Adept at receiving and monitoring data from multiple streams, including Access, SQL, and Excel data sources. Ability to synthesize quantitative information and interact effectively with colleagues and clients. Proven track record of generating summary documents for senior management for monthly and quarterly audit and compliance reporting."
  },
  {
    "objectID": "QuartoBlog/posts/cv/Cv.html#profile",
    "href": "QuartoBlog/posts/cv/Cv.html#profile",
    "title": "Ganta Preethi",
    "section": "",
    "text": "Experienced and dedicated Data Analyst with several years of experience identifying efficiencies and problem areas within data streams while communicating needs for projects. Adept at receiving and monitoring data from multiple streams, including Access, SQL, and Excel data sources. Ability to synthesize quantitative information and interact effectively with colleagues and clients. Proven track record of generating summary documents for senior management for monthly and quarterly audit and compliance reporting."
  },
  {
    "objectID": "QuartoBlog/posts/cv/Cv.html#employment-history",
    "href": "QuartoBlog/posts/cv/Cv.html#employment-history",
    "title": "Ganta Preethi",
    "section": "Employment History",
    "text": "Employment History\n\nCompleted internship on Python for Data Science in 1Stop.ai.\nCompleted internship on Cyber Security in 1Stop.ai."
  },
  {
    "objectID": "QuartoBlog/posts/cv/Cv.html#education",
    "href": "QuartoBlog/posts/cv/Cv.html#education",
    "title": "Ganta Preethi",
    "section": "Education",
    "text": "Education\nMaster of Information Assurance and Systems, Wilmington University, Wilmington\n\nGraduated in the top 5% of my class.\nGPA: 3.95 (Till Now)\n\nBachelor of Computer Sciences, Bapatla Women’s Engineering College, Bapatla\n\nGPA: 3.91"
  },
  {
    "objectID": "QuartoBlog/posts/cv/Cv.html#projects",
    "href": "QuartoBlog/posts/cv/Cv.html#projects",
    "title": "Ganta Preethi",
    "section": "Projects",
    "text": "Projects\n\nMouseLess Cursor using Facial Movements\nThe main objective of mouseless cursor control using facial movement is to provide an alternative method for computer users who are unable to use a traditional mouse due to physical limitations or disabilities. By using facial movements, users can more easily navigate their computer screens.\n\n\nObject Tracking Using Camshift Algorithm\nIt is an application of deep learning which is used to develop a unique identification for each of the initial detections and then track the detected objects as they move around frames in video.\n\n\nAutomatic Text Generation Using LSTM\nLSTM-based automatic text generation involves training a neural network to learn patterns in a dataset and generate new text based on those patterns. The objective is to minimize the difference between the generated and actual text using a loss function."
  },
  {
    "objectID": "QuartoBlog/posts/cv/Cv.html#details",
    "href": "QuartoBlog/posts/cv/Cv.html#details",
    "title": "Ganta Preethi",
    "section": "Details",
    "text": "Details\n\nEmail: preethiganta007@gmail.com\nContact: +1 (302) 409-5927\nLinkedIn: https://www.linkedin.com/in/preethi-g-4b414b28b"
  },
  {
    "objectID": "QuartoBlog/posts/cv/Cv.html#skills",
    "href": "QuartoBlog/posts/cv/Cv.html#skills",
    "title": "Ganta Preethi",
    "section": "Skills",
    "text": "Skills\n\nPython Programming\nC Programming\nSQL\nDBMS\nAWS\nLeadership Skills\nData Clean-ups\nPowerBI\nMicrosoft Office\nAgile Methodologies\nData Analytics\nGoogle Sheets"
  },
  {
    "objectID": "QuartoBlog/posts/cv/Cv.html#languages",
    "href": "QuartoBlog/posts/cv/Cv.html#languages",
    "title": "Ganta Preethi",
    "section": "Languages",
    "text": "Languages\n\nEnglish\nTelugu"
  },
  {
    "objectID": "QuartoBlog/about.html",
    "href": "QuartoBlog/about.html",
    "title": "About",
    "section": "",
    "text": "About Me"
  }
]