{"title":"Report on Wine Data","markdown":{"yaml":{"title":"Report on Wine Data","author":"Preethi Ganta","date":"2024-07-16","categories":["code","analysis"],"format":{"html":{"code-fold":true}},"jupyter":"python3","image":"image.png"},"headingText":"Image of Wine","containsRefs":false,"markdown":"\n![**Wine**](image.png){width=\"500\"}\n\n## About Wine data\nThe Wine data consists of measurements of various chemical properties of different types of wine. It is organized in a tabular format with multiple columns, each representing a specific property, and rows representing different wine samples. \n\n## Data Structure\n**Columns in wine data:**\n\n**class:** Class label (1, 2, or 3) representing different types of wine.<br>\nAlcohol<br>\nMalicacid<br>\nAsh<br>\nAlcalinity_of_ash<br>\nMagnesium<br>\nTotal_phenols<br>\nFlavanoids<br>\nNonflavanoid_phenols<br>\nProanthocyanins<br>\nColor_intensity<br>\nHue<br>\n0D280_0D315_of_diluted_wines<br>\nProline<br>\n\n## Descriptive Statistics\nDescriptive Statistics for wine data set\n\n\n```{python}\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport nbformat\n\n\ndata = pd.read_csv('wine.data', delimiter=',', engine='python' )\ndata.to_excel('wine.xlsx', index=False)\ncolumns = data.columns[data.columns != 'class']    \ngrpdata = data.groupby([\"class\"])\n\ndef statistics(data):\n        #numeric_columns = data.select_dtypes(include=['number']).columns\n        #print(numeric_columns)\n        mean_value = grpdata.mean(numeric_only= True)\n        median_value = grpdata.median(numeric_only= True)\n        mode_value = grpdata.apply(lambda x: x.mode().iloc[0] if not x.mode().empty else None, include_groups=False)\n        #mode_value = grpdata.mode().iloc[0]         \n        # Using f-strings to format the output\n        print(f\"Mean value for each column: \\n{mean_value}\")\n        print(\"==========================================================\")\n        print(f\"Median value for each column: \\n{median_value}\")\n        print('===========================================================')\n        print(f\"Mode value for each column: \\n{mode_value}\")     \n        for column in columns:\n            total_sum = grpdata[column].sum()     \n            std_value = grpdata[column].std()     \n            count_value = grpdata[column].count()\n            max_value = grpdata[column].max()\n            min_value = grpdata[column].min()\n            print(\"=========================================================\")\n            print(f\"Total sum of '{column}': {total_sum}\")\n            print(f\"Standard Deviation of '{column}': {std_value}\")\n            print(f\"Count value of '{column}': {count_value}\")\n            print(f\"Max Value of '{column}': {max_value}\")\n            print(f\"Min Value of '{column}': {min_value}\")\n        return mean_value, median_value, mode_value\n\nmean_value, median_value, mode_value = statistics(data)\n\n```\n\n\n## Histogram Plot\nHistogram plot for wine data set\n\n```{python}\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport nbformat\n\ndata = pd.read_csv('wine.data', delimiter=',', engine='python' )\ndata.to_excel('wine.xlsx', index=False)\ncolumns = data.columns[data.columns != 'class']    \ngrpdata = data.groupby([\"class\"])\n#numeric_columns = data.select_dtypes(include=['number'])\n#print(numeric_columns)\n\n\ndef histogram_plot(data):\n        # Plot histogram for each numeric column\n            for column in columns:\n                for name, group in grpdata:\n                    plt.figure(figsize=(6,4))\n                    class_name = name if isinstance(name, str) else name[0]\n                    print(\"class\" , class_name)\n                    plt.hist(group[column], bins=80, alpha=0.7, label=column)\n                    plt.xlabel(column)\n                    plt.ylabel('Frequency')\n                    plt.title(f'Histogram of {column}')\n                    plt.show()\n\n# Call the function with the data\nhistogram_plot(data)\n```\n\n## Scatter Plot\nScatter plot for iris data set\n\n```{python}\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport nbformat\n\n\ndata = pd.read_csv('wine.data', delimiter=',', engine='python' )\ndata.to_excel('wine.xlsx', index=False)\ncolumns = data.columns[data.columns != 'class']    \ngrpdata = data.groupby([\"class\"])\n    #print(data)\n\ndef scatter_plot(data):\n    colors = ['r', 'g', 'b']  # Define more colors if there are more than 2 classes\n\n    for column1 in columns:\n        for column2 in columns:\n            if column1 != column2:\n                plt.figure(figsize=(7,7))  # Create a larger figure for better visualization\n                for name, group in grpdata:\n                    color_map = colors[:len(grpdata)]\n                    plt.scatter(group[column1], group[column2], label=f' \"class\"{name}')\n                plt.title(f\"Scatter Plot of {column1} and {column2}\")\n                plt.xlabel(column1)\n                plt.ylabel(column2)\n                plt.legend()\n                plt.grid(True)\n                plt.show()\n\n\nscatter_plot(data)\n\n```\n\n## Line Plot\nLine plot for wine data set\n\n```{python}\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport nbformat\n\n\ndata = pd.read_csv('wine.data', delimiter=',', engine='python' )\ndata.to_excel('wine.xlsx', index=False)\ncolumns = data.columns[data.columns != 'class']    \ngrpdata = data.groupby([\"class\"])\n    #print(data)\n\ndef line_plot(data):\n    # Select only numeric columns\n    #numeric_columns = data.select_dtypes(include=['number']).columns\n    # Plot histogram for each numeric column\n    for name, group in grpdata:\n        class_name = name if isinstance(name, str) else name[0]\n        print(\"class\", class_name)\n        for column in columns:\n                plt.figure(figsize=(6, 4))\n                plt.plot(group.index, group[column], color='green' , label=column, linestyle='-', marker='o')\n                plt.title('Line Plot')\n                plt.xlabel('Index')\n                plt.ylabel(column)\n                plt.legend()\n                plt.grid(True)\n                plt.show()\n\nline_plot(data)\n\n```\n\n## Box Plot\nBox plot for iris data set\n\n```{python}\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport nbformat\n\n\ndata = pd.read_csv('wine.data', delimiter=',', engine='python' )\ndata.to_excel('wine.xlsx', index=False)\ncolumns = data.columns[data.columns != 'class']    \ngrpdata = data.groupby([\"class\"])\n    #print(data)\n\ndef box_plot(data):\n    for name, group in grpdata:\n        class_name = name if isinstance(name, str) else name[0]\n        print(\"class\" , class_name)\n        for column in columns:\n            plt.figure(figsize=(6, 4))\n            plt.boxplot(group[column])   #, tick_labels=numeric_columns\n            plt.title('Box Plot')\n            plt.xlabel(column)\n            plt.ylabel('Values')\n            plt.grid()\n            plt.show()\n\nbox_plot(data)\n```\n","srcMarkdownNoYaml":"\n# Image of Wine \n![**Wine**](image.png){width=\"500\"}\n\n## About Wine data\nThe Wine data consists of measurements of various chemical properties of different types of wine. It is organized in a tabular format with multiple columns, each representing a specific property, and rows representing different wine samples. \n\n## Data Structure\n**Columns in wine data:**\n\n**class:** Class label (1, 2, or 3) representing different types of wine.<br>\nAlcohol<br>\nMalicacid<br>\nAsh<br>\nAlcalinity_of_ash<br>\nMagnesium<br>\nTotal_phenols<br>\nFlavanoids<br>\nNonflavanoid_phenols<br>\nProanthocyanins<br>\nColor_intensity<br>\nHue<br>\n0D280_0D315_of_diluted_wines<br>\nProline<br>\n\n## Descriptive Statistics\nDescriptive Statistics for wine data set\n\n\n```{python}\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport nbformat\n\n\ndata = pd.read_csv('wine.data', delimiter=',', engine='python' )\ndata.to_excel('wine.xlsx', index=False)\ncolumns = data.columns[data.columns != 'class']    \ngrpdata = data.groupby([\"class\"])\n\ndef statistics(data):\n        #numeric_columns = data.select_dtypes(include=['number']).columns\n        #print(numeric_columns)\n        mean_value = grpdata.mean(numeric_only= True)\n        median_value = grpdata.median(numeric_only= True)\n        mode_value = grpdata.apply(lambda x: x.mode().iloc[0] if not x.mode().empty else None, include_groups=False)\n        #mode_value = grpdata.mode().iloc[0]         \n        # Using f-strings to format the output\n        print(f\"Mean value for each column: \\n{mean_value}\")\n        print(\"==========================================================\")\n        print(f\"Median value for each column: \\n{median_value}\")\n        print('===========================================================')\n        print(f\"Mode value for each column: \\n{mode_value}\")     \n        for column in columns:\n            total_sum = grpdata[column].sum()     \n            std_value = grpdata[column].std()     \n            count_value = grpdata[column].count()\n            max_value = grpdata[column].max()\n            min_value = grpdata[column].min()\n            print(\"=========================================================\")\n            print(f\"Total sum of '{column}': {total_sum}\")\n            print(f\"Standard Deviation of '{column}': {std_value}\")\n            print(f\"Count value of '{column}': {count_value}\")\n            print(f\"Max Value of '{column}': {max_value}\")\n            print(f\"Min Value of '{column}': {min_value}\")\n        return mean_value, median_value, mode_value\n\nmean_value, median_value, mode_value = statistics(data)\n\n```\n\n\n## Histogram Plot\nHistogram plot for wine data set\n\n```{python}\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport nbformat\n\ndata = pd.read_csv('wine.data', delimiter=',', engine='python' )\ndata.to_excel('wine.xlsx', index=False)\ncolumns = data.columns[data.columns != 'class']    \ngrpdata = data.groupby([\"class\"])\n#numeric_columns = data.select_dtypes(include=['number'])\n#print(numeric_columns)\n\n\ndef histogram_plot(data):\n        # Plot histogram for each numeric column\n            for column in columns:\n                for name, group in grpdata:\n                    plt.figure(figsize=(6,4))\n                    class_name = name if isinstance(name, str) else name[0]\n                    print(\"class\" , class_name)\n                    plt.hist(group[column], bins=80, alpha=0.7, label=column)\n                    plt.xlabel(column)\n                    plt.ylabel('Frequency')\n                    plt.title(f'Histogram of {column}')\n                    plt.show()\n\n# Call the function with the data\nhistogram_plot(data)\n```\n\n## Scatter Plot\nScatter plot for iris data set\n\n```{python}\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport nbformat\n\n\ndata = pd.read_csv('wine.data', delimiter=',', engine='python' )\ndata.to_excel('wine.xlsx', index=False)\ncolumns = data.columns[data.columns != 'class']    \ngrpdata = data.groupby([\"class\"])\n    #print(data)\n\ndef scatter_plot(data):\n    colors = ['r', 'g', 'b']  # Define more colors if there are more than 2 classes\n\n    for column1 in columns:\n        for column2 in columns:\n            if column1 != column2:\n                plt.figure(figsize=(7,7))  # Create a larger figure for better visualization\n                for name, group in grpdata:\n                    color_map = colors[:len(grpdata)]\n                    plt.scatter(group[column1], group[column2], label=f' \"class\"{name}')\n                plt.title(f\"Scatter Plot of {column1} and {column2}\")\n                plt.xlabel(column1)\n                plt.ylabel(column2)\n                plt.legend()\n                plt.grid(True)\n                plt.show()\n\n\nscatter_plot(data)\n\n```\n\n## Line Plot\nLine plot for wine data set\n\n```{python}\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport nbformat\n\n\ndata = pd.read_csv('wine.data', delimiter=',', engine='python' )\ndata.to_excel('wine.xlsx', index=False)\ncolumns = data.columns[data.columns != 'class']    \ngrpdata = data.groupby([\"class\"])\n    #print(data)\n\ndef line_plot(data):\n    # Select only numeric columns\n    #numeric_columns = data.select_dtypes(include=['number']).columns\n    # Plot histogram for each numeric column\n    for name, group in grpdata:\n        class_name = name if isinstance(name, str) else name[0]\n        print(\"class\", class_name)\n        for column in columns:\n                plt.figure(figsize=(6, 4))\n                plt.plot(group.index, group[column], color='green' , label=column, linestyle='-', marker='o')\n                plt.title('Line Plot')\n                plt.xlabel('Index')\n                plt.ylabel(column)\n                plt.legend()\n                plt.grid(True)\n                plt.show()\n\nline_plot(data)\n\n```\n\n## Box Plot\nBox plot for iris data set\n\n```{python}\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport nbformat\n\n\ndata = pd.read_csv('wine.data', delimiter=',', engine='python' )\ndata.to_excel('wine.xlsx', index=False)\ncolumns = data.columns[data.columns != 'class']    \ngrpdata = data.groupby([\"class\"])\n    #print(data)\n\ndef box_plot(data):\n    for name, group in grpdata:\n        class_name = name if isinstance(name, str) else name[0]\n        print(\"class\" , class_name)\n        for column in columns:\n            plt.figure(figsize=(6, 4))\n            plt.boxplot(group[column])   #, tick_labels=numeric_columns\n            plt.title('Box Plot')\n            plt.xlabel(column)\n            plt.ylabel('Values')\n            plt.grid()\n            plt.show()\n\nbox_plot(data)\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"output-file":"wine.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.49","theme":"cosmo","title-block-banner":true,"title":"Report on Wine Data","author":"Preethi Ganta","date":"2024-07-16","categories":["code","analysis"],"jupyter":"python3","image":"image.png"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}