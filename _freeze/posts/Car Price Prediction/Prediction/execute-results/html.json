{
  "hash": "9ebf20993207b88a25f22745454fc5b2",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle : \" Linear Regression - Car Price Prediction And Data Analysis\"\nimage: car.png\nauthor: \"Preethi Ganta\"\ndate: \"07-29-2024\"\ncategories: ['code','Analysis']\nformat : \n    html :\n         code-fold : true\njupyter : python3\n---\n\n\n\n## Problem Statement\nLet's consider a dataset for used cars. As a Data Scientist, you are given the task of creating an automated system that predicts the selling price of cars based on various features, such as horsepower, peak RPM, curb weight, etc.<br>\n\nBy using this features we can estimate the price for the car\nHere we can see the dataFrame containing accurate historical data, which includes features . Our task is to use this data that can predict the prices of any cars\n\n## Import Libraries\n\n::: {#3776b02f .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error, r2_score ,mean_absolute_error\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n```\n:::\n\n\n![Libraries](image.png)\nHere we can see the data below about the car data \n\n::: {#7800a7fc .cell execution_count=2}\n``` {.python .cell-code}\ndf = pd.read_csv('automobile.data', delimiter=',')\nprint(df.head())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   class normalized-losses         make fuel-type aspiration num-of-doors  \\\n0      3                 ?  alfa-romero       gas        std          two   \n1      3                 ?  alfa-romero       gas        std          two   \n2      1                 ?  alfa-romero       gas        std          two   \n3      2               164         audi       gas        std         four   \n4      2               164         audi       gas        std         four   \n\n    body-style drive-wheels engine-location  wheel-base  ...  engine-size  \\\n0  convertible          rwd           front        88.6  ...          130   \n1  convertible          rwd           front        88.6  ...          130   \n2    hatchback          rwd           front        94.5  ...          152   \n3        sedan          fwd           front        99.8  ...          109   \n4        sedan          4wd           front        99.4  ...          136   \n\n   fuel-system  bore  stroke compression-ratio horsepower  peak-rpm city-mpg  \\\n0         mpfi  3.47    2.68               9.0        111      5000       21   \n1         mpfi  3.47    2.68               9.0        111      5000       21   \n2         mpfi  2.68    3.47               9.0        154      5000       19   \n3         mpfi  3.19    3.40              10.0        102      5500       24   \n4         mpfi  3.19    3.40               8.0        115      5500       18   \n\n  highway-mpg  price  \n0          27  13495  \n1          27  16500  \n2          26  16500  \n3          30  13950  \n4          22  17450  \n\n[5 rows x 26 columns]\n```\n:::\n:::\n\n\n## DataCleaning \nBefore using the any dataset we need to clean data.\n<ul>\n    <li>Handling the missing values in the dataset</li>\n    <li>Replacing the '?' with the Empty string</li>\n</ul>\nConvert columns with the data type object (string) to numeric if the column contains numeric values. Otherwise, leave the column as object (string). For example, some columns contain '?'. These columns should be converted to numeric after cleaning the data.\n\n::: {#e2695437 .cell execution_count=3}\n``` {.python .cell-code}\ndf.replace(\"?\",'', inplace=True)\nprint(df)\nfeature_columns = ['horsepower','bore','stroke','normalized-losses', 'price', 'peak-rpm']\n# Convert selected columns to numeric (if they aren't already)\nfor col in feature_columns:\n        df[col] = pd.to_numeric(df[col], errors='coerce')\ndf = df.assign(price=df['price'].fillna(df['price'].mean()))\ndf = df.assign(horsepower=df['horsepower'].fillna(df['horsepower'].mean()))\ndf = df.assign(bore=df['bore'].fillna(df['bore'].mean()))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     class normalized-losses         make fuel-type aspiration num-of-doors  \\\n0        3                    alfa-romero       gas        std          two   \n1        3                    alfa-romero       gas        std          two   \n2        1                    alfa-romero       gas        std          two   \n3        2               164         audi       gas        std         four   \n4        2               164         audi       gas        std         four   \n..     ...               ...          ...       ...        ...          ...   \n200     -1                95        volvo       gas        std         four   \n201     -1                95        volvo       gas      turbo         four   \n202     -1                95        volvo       gas        std         four   \n203     -1                95        volvo    diesel      turbo         four   \n204     -1                95        volvo       gas      turbo         four   \n\n      body-style drive-wheels engine-location  wheel-base  ...  engine-size  \\\n0    convertible          rwd           front        88.6  ...          130   \n1    convertible          rwd           front        88.6  ...          130   \n2      hatchback          rwd           front        94.5  ...          152   \n3          sedan          fwd           front        99.8  ...          109   \n4          sedan          4wd           front        99.4  ...          136   \n..           ...          ...             ...         ...  ...          ...   \n200        sedan          rwd           front       109.1  ...          141   \n201        sedan          rwd           front       109.1  ...          141   \n202        sedan          rwd           front       109.1  ...          173   \n203        sedan          rwd           front       109.1  ...          145   \n204        sedan          rwd           front       109.1  ...          141   \n\n     fuel-system  bore  stroke compression-ratio horsepower  peak-rpm  \\\n0           mpfi  3.47    2.68               9.0        111      5000   \n1           mpfi  3.47    2.68               9.0        111      5000   \n2           mpfi  2.68    3.47               9.0        154      5000   \n3           mpfi  3.19    3.40              10.0        102      5500   \n4           mpfi  3.19    3.40               8.0        115      5500   \n..           ...   ...     ...               ...        ...       ...   \n200         mpfi  3.78    3.15               9.5        114      5400   \n201         mpfi  3.78    3.15               8.7        160      5300   \n202         mpfi  3.58    2.87               8.8        134      5500   \n203          idi  3.01    3.40              23.0        106      4800   \n204         mpfi  3.78    3.15               9.5        114      5400   \n\n    city-mpg highway-mpg  price  \n0         21          27  13495  \n1         21          27  16500  \n2         19          26  16500  \n3         24          30  13950  \n4         18          22  17450  \n..       ...         ...    ...  \n200       23          28  16845  \n201       19          25  19045  \n202       18          23  21485  \n203       26          27  22470  \n204       19          25  22625  \n\n[205 rows x 26 columns]\n```\n:::\n:::\n\n\n## Data Information\nWe could see that class, normalized-losses, wheel-base, length, width, height, curb-weight, engine-size, bore,stroke, compression-ratio, horsepower, peak-rpm, city-mpg, highway-mpg,   price are **numeric** whereas  make, fuel-type, aspiration,num-of-doors, body-style, drive-wheels, engine-location, engine-type, num-of-cylinders, fuel-system are **objects**( string) possibly categorical columns.\n\n::: {#65f772f6 .cell execution_count=4}\n``` {.python .cell-code}\ndf.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 205 entries, 0 to 204\nData columns (total 26 columns):\n #   Column             Non-Null Count  Dtype  \n---  ------             --------------  -----  \n 0   class              205 non-null    int64  \n 1   normalized-losses  164 non-null    float64\n 2   make               205 non-null    object \n 3   fuel-type          205 non-null    object \n 4   aspiration         205 non-null    object \n 5   num-of-doors       205 non-null    object \n 6   body-style         205 non-null    object \n 7   drive-wheels       205 non-null    object \n 8   engine-location    205 non-null    object \n 9   wheel-base         205 non-null    float64\n 10  length             205 non-null    float64\n 11  width              205 non-null    float64\n 12  height             205 non-null    float64\n 13  curb-weight        205 non-null    int64  \n 14  engine-type        205 non-null    object \n 15  num-of-cylinders   205 non-null    object \n 16  engine-size        205 non-null    int64  \n 17  fuel-system        205 non-null    object \n 18  bore               205 non-null    float64\n 19  stroke             201 non-null    float64\n 20  compression-ratio  205 non-null    float64\n 21  horsepower         205 non-null    float64\n 22  peak-rpm           203 non-null    float64\n 23  city-mpg           205 non-null    int64  \n 24  highway-mpg        205 non-null    int64  \n 25  price              205 non-null    float64\ndtypes: float64(11), int64(5), object(10)\nmemory usage: 41.8+ KB\n```\n:::\n:::\n\n\n### let's explore the Statistics for numeric columns\n\n::: {#46d71d3c .cell execution_count=5}\n``` {.python .cell-code}\ndf.describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>class</th>\n      <th>normalized-losses</th>\n      <th>wheel-base</th>\n      <th>length</th>\n      <th>width</th>\n      <th>height</th>\n      <th>curb-weight</th>\n      <th>engine-size</th>\n      <th>bore</th>\n      <th>stroke</th>\n      <th>compression-ratio</th>\n      <th>horsepower</th>\n      <th>peak-rpm</th>\n      <th>city-mpg</th>\n      <th>highway-mpg</th>\n      <th>price</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>205.000000</td>\n      <td>164.000000</td>\n      <td>205.000000</td>\n      <td>205.000000</td>\n      <td>205.000000</td>\n      <td>205.000000</td>\n      <td>205.000000</td>\n      <td>205.000000</td>\n      <td>205.000000</td>\n      <td>201.000000</td>\n      <td>205.000000</td>\n      <td>205.000000</td>\n      <td>203.000000</td>\n      <td>205.000000</td>\n      <td>205.000000</td>\n      <td>205.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>0.834146</td>\n      <td>122.000000</td>\n      <td>98.756585</td>\n      <td>174.049268</td>\n      <td>65.907805</td>\n      <td>53.724878</td>\n      <td>2555.565854</td>\n      <td>126.907317</td>\n      <td>3.329751</td>\n      <td>3.255423</td>\n      <td>10.142537</td>\n      <td>104.256158</td>\n      <td>5125.369458</td>\n      <td>25.219512</td>\n      <td>30.751220</td>\n      <td>13207.129353</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>1.245307</td>\n      <td>35.442168</td>\n      <td>6.021776</td>\n      <td>12.337289</td>\n      <td>2.145204</td>\n      <td>2.443522</td>\n      <td>520.680204</td>\n      <td>41.642693</td>\n      <td>0.270844</td>\n      <td>0.316717</td>\n      <td>3.972040</td>\n      <td>39.519211</td>\n      <td>479.334560</td>\n      <td>6.542142</td>\n      <td>6.886443</td>\n      <td>7868.768212</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>-2.000000</td>\n      <td>65.000000</td>\n      <td>86.600000</td>\n      <td>141.100000</td>\n      <td>60.300000</td>\n      <td>47.800000</td>\n      <td>1488.000000</td>\n      <td>61.000000</td>\n      <td>2.540000</td>\n      <td>2.070000</td>\n      <td>7.000000</td>\n      <td>48.000000</td>\n      <td>4150.000000</td>\n      <td>13.000000</td>\n      <td>16.000000</td>\n      <td>5118.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>0.000000</td>\n      <td>94.000000</td>\n      <td>94.500000</td>\n      <td>166.300000</td>\n      <td>64.100000</td>\n      <td>52.000000</td>\n      <td>2145.000000</td>\n      <td>97.000000</td>\n      <td>3.150000</td>\n      <td>3.110000</td>\n      <td>8.600000</td>\n      <td>70.000000</td>\n      <td>4800.000000</td>\n      <td>19.000000</td>\n      <td>25.000000</td>\n      <td>7788.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>1.000000</td>\n      <td>115.000000</td>\n      <td>97.000000</td>\n      <td>173.200000</td>\n      <td>65.500000</td>\n      <td>54.100000</td>\n      <td>2414.000000</td>\n      <td>120.000000</td>\n      <td>3.310000</td>\n      <td>3.290000</td>\n      <td>9.000000</td>\n      <td>95.000000</td>\n      <td>5200.000000</td>\n      <td>24.000000</td>\n      <td>30.000000</td>\n      <td>10595.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>2.000000</td>\n      <td>150.000000</td>\n      <td>102.400000</td>\n      <td>183.100000</td>\n      <td>66.900000</td>\n      <td>55.500000</td>\n      <td>2935.000000</td>\n      <td>141.000000</td>\n      <td>3.580000</td>\n      <td>3.410000</td>\n      <td>9.400000</td>\n      <td>116.000000</td>\n      <td>5500.000000</td>\n      <td>30.000000</td>\n      <td>34.000000</td>\n      <td>16500.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>3.000000</td>\n      <td>256.000000</td>\n      <td>120.900000</td>\n      <td>208.100000</td>\n      <td>72.300000</td>\n      <td>59.800000</td>\n      <td>4066.000000</td>\n      <td>326.000000</td>\n      <td>3.940000</td>\n      <td>4.170000</td>\n      <td>23.000000</td>\n      <td>288.000000</td>\n      <td>6600.000000</td>\n      <td>49.000000</td>\n      <td>54.000000</td>\n      <td>45400.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Correlation\n\nThe relationship between two numerical features such as price and hoursepower etc. can be numerically expressed using a measure called correlation coefficient, which can be computed using the .corr method from the pandas' library.\n\n::: {#b45b9074 .cell execution_count=6}\n``` {.python .cell-code}\ncorrelation_coefficient_columns = ['normalized-losses','wheel-base','length','width','height','curb-weight','engine-size','bore','stroke','compression-ratio','horsepower','peak-rpm','city-mpg','highway-mpg']\nfor col in correlation_coefficient_columns:\n    correlation_coefficient = df['price'].corr(df[col])\n    print(f\"Correlation between price and {col}: {correlation_coefficient}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCorrelation between price and normalized-losses: 0.20325417074184235\nCorrelation between price and wheel-base: 0.5831681499789547\nCorrelation between price and length: 0.6829862954386219\nCorrelation between price and width: 0.728698817593184\nCorrelation between price and height: 0.13438751871051807\nCorrelation between price and curb-weight: 0.820824733354729\nCorrelation between price and engine-size: 0.8617522436859723\nCorrelation between price and bore: 0.5323000195387406\nCorrelation between price and stroke: 0.08213793359382601\nCorrelation between price and compression-ratio: 0.07099036277901553\nCorrelation between price and horsepower: 0.7579169537498175\nCorrelation between price and peak-rpm: -0.10096015614268217\nCorrelation between price and city-mpg: -0.6674492651600004\nCorrelation between price and highway-mpg: -0.6905257341183486\n```\n:::\n:::\n\n\nWe could observe from the values above, that there’s a high correlation between **price** and **engine-size** but less correlation between **price** and **highway-mpg**.\n\nWe can use the **.corr()** method to show the correlation coefficients between all pairs of numerical columns.\n\n::: {#1b8700e8 .cell execution_count=7}\n``` {.python .cell-code}\ndf.corr(method='pearson',numeric_only=True)\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>class</th>\n      <th>normalized-losses</th>\n      <th>wheel-base</th>\n      <th>length</th>\n      <th>width</th>\n      <th>height</th>\n      <th>curb-weight</th>\n      <th>engine-size</th>\n      <th>bore</th>\n      <th>stroke</th>\n      <th>compression-ratio</th>\n      <th>horsepower</th>\n      <th>peak-rpm</th>\n      <th>city-mpg</th>\n      <th>highway-mpg</th>\n      <th>price</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>class</th>\n      <td>1.000000</td>\n      <td>0.528667</td>\n      <td>-0.531954</td>\n      <td>-0.357612</td>\n      <td>-0.232919</td>\n      <td>-0.541038</td>\n      <td>-0.227691</td>\n      <td>-0.105790</td>\n      <td>-0.130083</td>\n      <td>-0.008965</td>\n      <td>-0.178515</td>\n      <td>0.071389</td>\n      <td>0.274573</td>\n      <td>-0.035823</td>\n      <td>0.034606</td>\n      <td>-0.082201</td>\n    </tr>\n    <tr>\n      <th>normalized-losses</th>\n      <td>0.528667</td>\n      <td>1.000000</td>\n      <td>-0.074362</td>\n      <td>0.023220</td>\n      <td>0.105073</td>\n      <td>-0.432335</td>\n      <td>0.119893</td>\n      <td>0.167365</td>\n      <td>-0.033577</td>\n      <td>0.065627</td>\n      <td>-0.132654</td>\n      <td>0.295772</td>\n      <td>0.264597</td>\n      <td>-0.258502</td>\n      <td>-0.210768</td>\n      <td>0.203254</td>\n    </tr>\n    <tr>\n      <th>wheel-base</th>\n      <td>-0.531954</td>\n      <td>-0.074362</td>\n      <td>1.000000</td>\n      <td>0.874587</td>\n      <td>0.795144</td>\n      <td>0.589435</td>\n      <td>0.776386</td>\n      <td>0.569329</td>\n      <td>0.488760</td>\n      <td>0.161477</td>\n      <td>0.249786</td>\n      <td>0.351957</td>\n      <td>-0.361052</td>\n      <td>-0.470414</td>\n      <td>-0.544082</td>\n      <td>0.583168</td>\n    </tr>\n    <tr>\n      <th>length</th>\n      <td>-0.357612</td>\n      <td>0.023220</td>\n      <td>0.874587</td>\n      <td>1.000000</td>\n      <td>0.841118</td>\n      <td>0.491029</td>\n      <td>0.877728</td>\n      <td>0.683360</td>\n      <td>0.606462</td>\n      <td>0.129739</td>\n      <td>0.158414</td>\n      <td>0.554434</td>\n      <td>-0.287325</td>\n      <td>-0.670909</td>\n      <td>-0.704662</td>\n      <td>0.682986</td>\n    </tr>\n    <tr>\n      <th>width</th>\n      <td>-0.232919</td>\n      <td>0.105073</td>\n      <td>0.795144</td>\n      <td>0.841118</td>\n      <td>1.000000</td>\n      <td>0.279210</td>\n      <td>0.867032</td>\n      <td>0.735433</td>\n      <td>0.559152</td>\n      <td>0.182956</td>\n      <td>0.181129</td>\n      <td>0.642195</td>\n      <td>-0.219957</td>\n      <td>-0.642704</td>\n      <td>-0.677218</td>\n      <td>0.728699</td>\n    </tr>\n    <tr>\n      <th>height</th>\n      <td>-0.541038</td>\n      <td>-0.432335</td>\n      <td>0.589435</td>\n      <td>0.491029</td>\n      <td>0.279210</td>\n      <td>1.000000</td>\n      <td>0.295572</td>\n      <td>0.067149</td>\n      <td>0.171101</td>\n      <td>-0.056999</td>\n      <td>0.261214</td>\n      <td>-0.110137</td>\n      <td>-0.322272</td>\n      <td>-0.048640</td>\n      <td>-0.107358</td>\n      <td>0.134388</td>\n    </tr>\n    <tr>\n      <th>curb-weight</th>\n      <td>-0.227691</td>\n      <td>0.119893</td>\n      <td>0.776386</td>\n      <td>0.877728</td>\n      <td>0.867032</td>\n      <td>0.295572</td>\n      <td>1.000000</td>\n      <td>0.850594</td>\n      <td>0.648485</td>\n      <td>0.168929</td>\n      <td>0.151362</td>\n      <td>0.750968</td>\n      <td>-0.266306</td>\n      <td>-0.757414</td>\n      <td>-0.797465</td>\n      <td>0.820825</td>\n    </tr>\n    <tr>\n      <th>engine-size</th>\n      <td>-0.105790</td>\n      <td>0.167365</td>\n      <td>0.569329</td>\n      <td>0.683360</td>\n      <td>0.735433</td>\n      <td>0.067149</td>\n      <td>0.850594</td>\n      <td>1.000000</td>\n      <td>0.583798</td>\n      <td>0.206675</td>\n      <td>0.028971</td>\n      <td>0.810713</td>\n      <td>-0.244618</td>\n      <td>-0.653658</td>\n      <td>-0.677470</td>\n      <td>0.861752</td>\n    </tr>\n    <tr>\n      <th>bore</th>\n      <td>-0.130083</td>\n      <td>-0.033577</td>\n      <td>0.488760</td>\n      <td>0.606462</td>\n      <td>0.559152</td>\n      <td>0.171101</td>\n      <td>0.648485</td>\n      <td>0.583798</td>\n      <td>1.000000</td>\n      <td>-0.055909</td>\n      <td>0.005201</td>\n      <td>0.575737</td>\n      <td>-0.255053</td>\n      <td>-0.584508</td>\n      <td>-0.586992</td>\n      <td>0.532300</td>\n    </tr>\n    <tr>\n      <th>stroke</th>\n      <td>-0.008965</td>\n      <td>0.065627</td>\n      <td>0.161477</td>\n      <td>0.129739</td>\n      <td>0.182956</td>\n      <td>-0.056999</td>\n      <td>0.168929</td>\n      <td>0.206675</td>\n      <td>-0.055909</td>\n      <td>1.000000</td>\n      <td>0.186170</td>\n      <td>0.088400</td>\n      <td>-0.071493</td>\n      <td>-0.042906</td>\n      <td>-0.044528</td>\n      <td>0.082138</td>\n    </tr>\n    <tr>\n      <th>compression-ratio</th>\n      <td>-0.178515</td>\n      <td>-0.132654</td>\n      <td>0.249786</td>\n      <td>0.158414</td>\n      <td>0.181129</td>\n      <td>0.261214</td>\n      <td>0.151362</td>\n      <td>0.028971</td>\n      <td>0.005201</td>\n      <td>0.186170</td>\n      <td>1.000000</td>\n      <td>-0.205740</td>\n      <td>-0.436221</td>\n      <td>0.324701</td>\n      <td>0.265201</td>\n      <td>0.070990</td>\n    </tr>\n    <tr>\n      <th>horsepower</th>\n      <td>0.071389</td>\n      <td>0.295772</td>\n      <td>0.351957</td>\n      <td>0.554434</td>\n      <td>0.642195</td>\n      <td>-0.110137</td>\n      <td>0.750968</td>\n      <td>0.810713</td>\n      <td>0.575737</td>\n      <td>0.088400</td>\n      <td>-0.205740</td>\n      <td>1.000000</td>\n      <td>0.130971</td>\n      <td>-0.803162</td>\n      <td>-0.770903</td>\n      <td>0.757917</td>\n    </tr>\n    <tr>\n      <th>peak-rpm</th>\n      <td>0.274573</td>\n      <td>0.264597</td>\n      <td>-0.361052</td>\n      <td>-0.287325</td>\n      <td>-0.219957</td>\n      <td>-0.322272</td>\n      <td>-0.266306</td>\n      <td>-0.244618</td>\n      <td>-0.255053</td>\n      <td>-0.071493</td>\n      <td>-0.436221</td>\n      <td>0.130971</td>\n      <td>1.000000</td>\n      <td>-0.113788</td>\n      <td>-0.054257</td>\n      <td>-0.100960</td>\n    </tr>\n    <tr>\n      <th>city-mpg</th>\n      <td>-0.035823</td>\n      <td>-0.258502</td>\n      <td>-0.470414</td>\n      <td>-0.670909</td>\n      <td>-0.642704</td>\n      <td>-0.048640</td>\n      <td>-0.757414</td>\n      <td>-0.653658</td>\n      <td>-0.584508</td>\n      <td>-0.042906</td>\n      <td>0.324701</td>\n      <td>-0.803162</td>\n      <td>-0.113788</td>\n      <td>1.000000</td>\n      <td>0.971337</td>\n      <td>-0.667449</td>\n    </tr>\n    <tr>\n      <th>highway-mpg</th>\n      <td>0.034606</td>\n      <td>-0.210768</td>\n      <td>-0.544082</td>\n      <td>-0.704662</td>\n      <td>-0.677218</td>\n      <td>-0.107358</td>\n      <td>-0.797465</td>\n      <td>-0.677470</td>\n      <td>-0.586992</td>\n      <td>-0.044528</td>\n      <td>0.265201</td>\n      <td>-0.770903</td>\n      <td>-0.054257</td>\n      <td>0.971337</td>\n      <td>1.000000</td>\n      <td>-0.690526</td>\n    </tr>\n    <tr>\n      <th>price</th>\n      <td>-0.082201</td>\n      <td>0.203254</td>\n      <td>0.583168</td>\n      <td>0.682986</td>\n      <td>0.728699</td>\n      <td>0.134388</td>\n      <td>0.820825</td>\n      <td>0.861752</td>\n      <td>0.532300</td>\n      <td>0.082138</td>\n      <td>0.070990</td>\n      <td>0.757917</td>\n      <td>-0.100960</td>\n      <td>-0.667449</td>\n      <td>-0.690526</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Visualization of above table using a heatmap.\n\n::: {#535649eb .cell execution_count=8}\n``` {.python .cell-code}\nplt.figure(figsize=(12, 8))\nsns.heatmap(df.corr(method='pearson',numeric_only=True), cmap='Reds', annot=True)\n#print(data)\nplt.title('Correlation Matrix')\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\nText(0.5, 1.0, 'Correlation Matrix')\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](Prediction_files/figure-html/cell-9-output-2.png){width=987 height=760}\n:::\n:::\n\n\n<br>\nIn the correlation matrix, we observe that features like **horsepower, engine-size, curb-weight, and width** have high correlations with the price, close to **+1**, indicating a strong positive linear relationship. On the other hand, **length** is highly correlated with **wheel-base**, suggesting that including both in the model might lead to redundant information.\n\nIf **length and wheel-base** provide overlapping information, adding both to the model may not improve its predictive power. Instead, the model might perform better with a combination of features that provide complementary information. For instance, **wheel-base and bore** might together explain different aspects of price variation that length does not capture.\n\nTherefore, the features **horsepower, engine-size, curb-weight, width, wheel-base, and bore** are chosen to build a more effective linear regression model.\n\n## Linear Regression using a Single Feature\n\n::: {#b5611750 .cell execution_count=9}\n``` {.python .cell-code}\ndf = df.assign(price=df['price'].fillna(df['price'].mean()))\ndf = df.assign(horsepower=df['horsepower'].fillna(df['horsepower'].mean()))\ndf = df.assign(bore=df['bore'].fillna(df['bore'].mean()))\n\nprint(df)\nX = df[['horsepower', 'engine-size','curb-weight', 'width','wheel-base','bore','length']] # Independent variables\n\ny = df['price']           #Dependent variables\n#print(y)\n\n# Split the data into training and validation sets\nX_train, X_val, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n#print(X_train)\n#print(X_val)\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n# Make predictions on the training set\nX_train_pred = model.predict(X_train)\n\n# Make predictions on the testing set\nX_test_pred = model.predict(X_val)\n\n#print(y_train_pred , y_test_pred)\n\n# Calculate Mean Squared Error\ntrain_mse = mean_squared_error(y_train, X_train_pred)\ntest_mse = mean_squared_error(y_test, X_test_pred)\n\n# Calculate Mean Absolute Error\ntrain_mae = mean_absolute_error(y_train, X_train_pred)\ntest_mae = mean_absolute_error(y_test, X_test_pred)\n\n# Calculate R² Score\ntrain_r2 = r2_score(y_train, X_train_pred)\ntest_r2 = r2_score(y_test, X_test_pred)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     class  normalized-losses         make fuel-type aspiration num-of-doors  \\\n0        3                NaN  alfa-romero       gas        std          two   \n1        3                NaN  alfa-romero       gas        std          two   \n2        1                NaN  alfa-romero       gas        std          two   \n3        2              164.0         audi       gas        std         four   \n4        2              164.0         audi       gas        std         four   \n..     ...                ...          ...       ...        ...          ...   \n200     -1               95.0        volvo       gas        std         four   \n201     -1               95.0        volvo       gas      turbo         four   \n202     -1               95.0        volvo       gas        std         four   \n203     -1               95.0        volvo    diesel      turbo         four   \n204     -1               95.0        volvo       gas      turbo         four   \n\n      body-style drive-wheels engine-location  wheel-base  ...  engine-size  \\\n0    convertible          rwd           front        88.6  ...          130   \n1    convertible          rwd           front        88.6  ...          130   \n2      hatchback          rwd           front        94.5  ...          152   \n3          sedan          fwd           front        99.8  ...          109   \n4          sedan          4wd           front        99.4  ...          136   \n..           ...          ...             ...         ...  ...          ...   \n200        sedan          rwd           front       109.1  ...          141   \n201        sedan          rwd           front       109.1  ...          141   \n202        sedan          rwd           front       109.1  ...          173   \n203        sedan          rwd           front       109.1  ...          145   \n204        sedan          rwd           front       109.1  ...          141   \n\n     fuel-system  bore  stroke compression-ratio horsepower  peak-rpm  \\\n0           mpfi  3.47    2.68               9.0      111.0    5000.0   \n1           mpfi  3.47    2.68               9.0      111.0    5000.0   \n2           mpfi  2.68    3.47               9.0      154.0    5000.0   \n3           mpfi  3.19    3.40              10.0      102.0    5500.0   \n4           mpfi  3.19    3.40               8.0      115.0    5500.0   \n..           ...   ...     ...               ...        ...       ...   \n200         mpfi  3.78    3.15               9.5      114.0    5400.0   \n201         mpfi  3.78    3.15               8.7      160.0    5300.0   \n202         mpfi  3.58    2.87               8.8      134.0    5500.0   \n203          idi  3.01    3.40              23.0      106.0    4800.0   \n204         mpfi  3.78    3.15               9.5      114.0    5400.0   \n\n    city-mpg  highway-mpg    price  \n0         21           27  13495.0  \n1         21           27  16500.0  \n2         19           26  16500.0  \n3         24           30  13950.0  \n4         18           22  17450.0  \n..       ...          ...      ...  \n200       23           28  16845.0  \n201       19           25  19045.0  \n202       18           23  21485.0  \n203       26           27  22470.0  \n204       19           25  22625.0  \n\n[205 rows x 26 columns]\n```\n:::\n:::\n\n\n## Evaluation\n\n::: {#f257bcff .cell execution_count=10}\n``` {.python .cell-code}\nprint(f\"Training MSE: {train_mse}\")\nprint(f\"Testing MSE: {test_mse}\")\nprint(\"===========================================\")\nprint(f\"Training MAE: {train_mae}\")\nprint(f\"Testing MAE: {test_mae}\")\nprint(\"=============================================\")\nprint(f\"Training R²: {train_r2}\")\nprint(f\"Testing R²: {test_r2}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTraining MSE: 13273431.422094898\nTesting MSE: 15453517.236073863\n===========================================\nTraining MAE: 2417.6617006861425\nTesting MAE: 2773.3099288861613\n=============================================\nTraining R²: 0.7691692520480402\nTesting R²: 0.8018070302642768\n```\n:::\n:::\n\n\n## Ploting\n\n::: {#840436ad .cell execution_count=11}\n``` {.python .cell-code}\n# Plotting\n\nplt.figure(figsize=(8,6))\n# Plot training data and regression line\nplt.scatter(X_train_pred,y_train ,color='blue', edgecolor='w', alpha=0.6, label='Predicted Training Data')\nplt.plot([min(y_train), max(y_train)], [min(y_train), max(y_train)], color='red', linestyle='--', label='Perfect Fit Line')\n\n# Add title and labels\nplt.title('Training Data vs. Predictions')\nplt.xlabel('predicted Price')\nplt.ylabel('Acutal Price')\nplt.legend()\nplt.show()\n\nplt.figure(figsize=(8,6))\n# Plot training data and regression line\nplt.scatter(X_test_pred,y_test,color='blue', edgecolor='w', alpha=0.6, label='Predicted Test Data')\nplt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red', linestyle='--', label='Perfect Fit Line')\n# Add title and labels\nplt.title('Test Data vs. Predictions')\nplt.xlabel('Predicted Price')\nplt.ylabel('Acutal Price')\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](Prediction_files/figure-html/cell-12-output-1.png){width=684 height=523}\n:::\n\n::: {.cell-output .cell-output-display}\n![](Prediction_files/figure-html/cell-12-output-2.png){width=684 height=523}\n:::\n:::\n\n\n::: {#55329493 .cell execution_count=12}\n``` {.python .cell-code}\nimport statsmodels.api as sm\nimport numpy as np\n\n# Generate some sample data\nnp.random.seed(0)\nX = df[['horsepower', 'engine-size','curb-weight', 'width','wheel-base','bore','length']] # Independent variables\n\ny = df['price'] \n# Add a constant to the independent variables (for the intercept)\nX = sm.add_constant(X)\n\n# Fit the model\nmodel = sm.OLS(y, X).fit()\n\n# Print the summary\nprint(model.summary())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                            OLS Regression Results                            \n==============================================================================\nDep. Variable:                  price   R-squared:                       0.779\nModel:                            OLS   Adj. R-squared:                  0.771\nMethod:                 Least Squares   F-statistic:                     99.18\nDate:                Wed, 28 Aug 2024   Prob (F-statistic):           4.39e-61\nTime:                        20:15:54   Log-Likelihood:                -1974.6\nNo. Observations:                 205   AIC:                             3965.\nDf Residuals:                     197   BIC:                             3992.\nDf Model:                           7                                         \nCovariance Type:            nonrobust                                         \n===============================================================================\n                  coef    std err          t      P>|t|      [0.025      0.975]\n-------------------------------------------------------------------------------\nconst       -2.484e+04   1.45e+04     -1.715      0.088   -5.34e+04    3717.930\nhorsepower     33.0124     14.024      2.354      0.020       5.355      60.670\nengine-size    97.1710     13.980      6.951      0.000      69.601     124.741\ncurb-weight     3.1358      1.712      1.832      0.069      -0.241       6.512\nwidth         179.4978    278.687      0.644      0.520    -370.095     729.091\nwheel-base     86.6198    108.685      0.797      0.426    -127.716     300.956\nbore        -1491.4314   1321.909     -1.128      0.261   -4098.341    1115.478\nlength         -6.6857     59.743     -0.112      0.911    -124.503     111.131\n==============================================================================\nOmnibus:                       32.150   Durbin-Watson:                   1.027\nProb(Omnibus):                  0.000   Jarque-Bera (JB):              125.484\nSkew:                           0.508   Prob(JB):                     5.64e-28\nKurtosis:                       6.696   Cond. No.                     1.44e+05\n==============================================================================\n\nNotes:\n[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n[2] The condition number is large, 1.44e+05. This might indicate that there are\nstrong multicollinearity or other numerical problems.\n```\n:::\n:::\n\n\n",
    "supporting": [
      "Prediction_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}